// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: acciones.jflex


/* codigo de usuario */
package com.luis.proyectoservidor.lexer;
import com.luis.proyectoservidor.parser.sym;
import java.util.*;
import java.io.StringReader;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class AccionesLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int VALOR_CORCHETES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  5,  6,  7,  8,  5,  5,  0,  5,  5,  5,  5,  5,  9,  5, 10, 
    11, 12, 13, 14, 14, 14, 14, 14, 14, 14,  5,  0, 15, 16, 17,  0, 
     5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 
    33, 34, 35, 36, 37, 38, 39, 40, 41, 28, 42, 43, 44, 45,  0, 46, 
     0, 47, 48, 49, 50, 51, 50, 28, 28, 52, 28, 28, 53, 54, 55, 56, 
    57, 58, 59, 60, 61, 62, 63, 28, 28, 28, 28,  0, 64,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\5\1\1\10\1\11\4\12\2\13\10\12\1\14"+
    "\1\15\15\0\1\16\1\17\7\0\1\20\1\12\1\16"+
    "\1\13\11\12\1\21\1\22\1\23\1\24\27\0\1\20"+
    "\1\12\1\13\11\12\11\0\1\25\17\0\1\12\1\13"+
    "\5\12\1\26\3\12\27\0\1\27\11\12\1\30\23\0"+
    "\1\31\2\0\1\32\1\0\4\12\1\33\3\12\1\34"+
    "\3\0\1\35\1\0\1\36\1\37\6\0\1\40\1\0"+
    "\1\41\1\42\6\0\1\43\1\12\1\44\2\12\1\45"+
    "\2\0\1\46\7\0\1\47\1\50\1\51\1\0\1\52"+
    "\1\53\1\54\1\0\1\12\14\0\1\55\1\56\1\57"+
    "\1\12\15\0\1\60\1\61\5\0\1\62\10\0\1\63"+
    "\37\0\1\64\5\0\1\65\13\0\1\66\14\0\1\67"+
    "\4\0\1\70\2\0\1\71\1\72\2\0\1\73\3\0"+
    "\1\74\1\75\4\0\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\202\0\303\0\u0104\0\u0145\0\202"+
    "\0\u0186\0\202\0\202\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb"+
    "\0\202\0\202\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\202\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0145"+
    "\0\202\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u030c\0\u0bef\0\u03cf\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\202\0\202\0\202"+
    "\0\202\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248"+
    "\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450"+
    "\0\202\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\202\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u030c\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\202"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c"+
    "\0\u27dd\0\u030c\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b"+
    "\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73"+
    "\0\202\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u030c\0\u2ef9"+
    "\0\u2f3a\0\u2f7b\0\u030c\0\u2fbc\0\u2ffd\0\u303e\0\202\0\u307f"+
    "\0\202\0\202\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\202\0\u3246\0\202\0\202\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u33cc\0\u030c\0\u340d\0\u030c\0\u344e\0\u348f\0\u030c"+
    "\0\u34d0\0\u3511\0\202\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\202\0\202\0\202\0\u3719\0\202\0\u375a"+
    "\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962"+
    "\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\202"+
    "\0\202\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\202\0\u030c\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\202"+
    "\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\202\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24"+
    "\0\202\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\202\0\u4baa"+
    "\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2"+
    "\0\u4df3\0\u4e34\0\202\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79"+
    "\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140\0\202"+
    "\0\u5181\0\u51c2\0\u5203\0\u5244\0\202\0\u5285\0\u52c6\0\202"+
    "\0\202\0\u5307\0\u5348\0\202\0\u5389\0\u53ca\0\u540b\0\202"+
    "\0\202\0\u544c\0\u548d\0\u54ce\0\u550f\0\202\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\3\1\6\1\3\2\7"+
    "\1\10\4\3\1\11\1\12\1\13\1\14\3\3\1\15"+
    "\10\3\1\16\1\3\1\17\5\3\1\20\3\3\1\21"+
    "\2\3\1\7\1\14\3\3\1\15\3\3\1\16\1\3"+
    "\1\17\5\3\1\20\1\22\4\3\2\23\1\24\1\25"+
    "\2\26\1\23\1\27\2\30\1\27\1\3\1\23\1\3"+
    "\2\23\1\31\1\32\4\23\1\33\1\34\2\23\1\35"+
    "\2\23\1\36\3\23\1\37\1\23\1\40\3\23\1\3"+
    "\1\41\1\42\1\26\22\23\103\0\1\4\120\0\1\43"+
    "\1\44\1\45\1\0\1\46\1\47\2\0\1\50\3\0"+
    "\1\51\1\52\1\53\1\54\2\0\1\55\1\56\1\57"+
    "\45\0\4\60\3\0\31\60\4\0\21\60\13\0\1\61"+
    "\112\0\1\62\20\0\1\63\13\0\1\62\13\0\1\63"+
    "\50\0\1\64\27\0\1\64\43\0\1\65\27\0\1\65"+
    "\32\0\1\66\34\0\1\66\43\0\1\67\34\0\1\67"+
    "\25\0\13\23\1\0\1\23\1\0\31\23\3\0\23\23"+
    "\4\70\2\24\1\71\10\24\1\70\1\24\1\70\31\24"+
    "\3\70\23\24\4\0\7\23\4\72\1\0\1\23\1\0"+
    "\6\72\23\23\3\0\1\23\5\72\15\23\4\0\7\23"+
    "\4\73\1\0\1\23\1\0\31\73\3\0\1\23\21\73"+
    "\1\23\4\0\7\23\4\27\1\0\1\23\1\0\31\23"+
    "\3\0\23\23\4\0\7\23\4\74\1\0\1\23\1\0"+
    "\31\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\4\23\1\75\24\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\4\23\1\76\24\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\14\23\1\77\13\23\1\100"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\24\23"+
    "\1\101\4\23\3\0\23\23\4\0\13\23\1\0\1\23"+
    "\1\0\4\23\1\102\24\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\1\103\30\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\10\23\1\104\20\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\10\23\1\105"+
    "\20\23\3\0\23\23\6\0\1\106\60\0\1\107\3\0"+
    "\1\110\1\0\1\111\33\0\1\112\4\0\1\113\1\0"+
    "\1\114\101\0\1\115\75\0\1\116\2\0\1\117\105\0"+
    "\1\120\61\0\1\121\77\0\1\122\113\0\1\123\106\0"+
    "\1\124\75\0\1\125\57\0\1\126\110\0\1\127\74\0"+
    "\1\130\3\0\1\131\112\0\1\132\60\0\1\133\34\0"+
    "\1\133\62\0\1\134\27\0\1\134\37\0\1\135\31\0"+
    "\1\135\52\0\1\136\27\0\1\136\55\0\1\137\27\0"+
    "\1\137\42\0\1\140\27\0\1\140\13\0\6\70\1\141"+
    "\72\70\4\0\7\23\4\142\1\0\1\23\1\0\6\142"+
    "\23\23\3\0\1\23\5\142\15\23\4\0\7\23\4\143"+
    "\1\0\1\23\1\0\31\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\15\23\1\144\13\23\3\0\23\23"+
    "\4\0\13\23\1\0\1\23\1\0\21\23\1\145\7\23"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\1\146"+
    "\30\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\20\23\1\147\10\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\22\23\1\150\6\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\15\23\1\151\13\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\21\23\1\152"+
    "\7\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\23\23\1\153\5\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\3\23\1\154\25\23\3\0\23\23\43\0"+
    "\1\155\67\0\1\156\12\0\1\157\57\0\1\160\117\0"+
    "\1\161\57\0\1\162\113\0\1\163\75\0\1\164\72\0"+
    "\1\165\62\0\1\166\117\0\1\167\101\0\1\170\104\0"+
    "\1\171\73\0\1\172\2\0\1\173\115\0\1\174\104\0"+
    "\1\175\74\0\1\176\101\0\1\177\64\0\1\200\31\0"+
    "\1\200\46\0\1\201\31\0\1\201\56\0\1\202\27\0"+
    "\1\202\31\0\1\203\34\0\1\203\42\0\1\204\34\0"+
    "\1\204\61\0\1\205\27\0\1\205\14\0\7\23\4\206"+
    "\1\0\1\23\1\0\6\206\23\23\3\0\1\23\5\206"+
    "\15\23\4\0\7\23\4\207\1\0\1\23\1\0\31\23"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\23\23"+
    "\1\210\5\23\3\0\23\23\4\0\13\23\1\0\1\23"+
    "\1\0\4\23\1\211\24\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\6\23\1\212\22\23\3\0\23\23"+
    "\4\0\13\23\1\0\1\23\1\0\24\23\1\213\4\23"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\23\23"+
    "\1\214\5\23\3\0\23\23\4\0\13\23\1\0\1\23"+
    "\1\0\24\23\1\215\4\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\21\23\1\216\7\23\3\0\23\23"+
    "\4\0\13\23\1\0\1\23\1\0\24\23\1\217\4\23"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\4\23"+
    "\1\220\24\23\3\0\23\23\26\0\1\221\111\0\1\222"+
    "\107\0\1\223\63\0\1\224\112\0\1\225\101\0\1\226"+
    "\74\0\1\227\102\0\1\230\67\0\1\231\101\0\1\232"+
    "\115\0\1\233\61\0\1\234\113\0\1\235\67\0\1\236"+
    "\100\0\1\237\113\0\1\240\101\0\1\241\54\0\1\242"+
    "\116\0\1\243\27\0\1\243\33\0\1\244\34\0\1\244"+
    "\66\0\1\245\27\0\1\245\45\0\1\246\27\0\1\246"+
    "\43\0\1\247\27\0\1\247\55\0\1\250\27\0\1\250"+
    "\11\0\7\23\4\251\1\0\1\23\1\0\6\251\23\23"+
    "\3\0\1\23\5\251\15\23\4\0\5\23\1\252\1\23"+
    "\4\27\1\0\1\23\1\0\31\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\21\23\1\253\7\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\2\23\1\254"+
    "\26\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\4\23\1\255\24\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\10\23\1\256\20\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\10\23\1\257\20\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\1\260\30\23"+
    "\3\0\23\23\4\0\13\23\1\0\1\23\1\0\13\23"+
    "\1\261\15\23\3\0\23\23\4\0\13\23\1\0\1\23"+
    "\1\0\16\23\1\262\12\23\3\0\23\23\30\0\1\263"+
    "\76\0\1\264\115\0\1\265\75\0\1\266\62\0\1\267"+
    "\104\0\1\270\115\0\1\271\103\0\1\272\54\0\1\273"+
    "\105\0\1\274\73\0\1\275\15\0\1\276\66\0\1\277"+
    "\100\0\1\300\111\0\1\301\101\0\1\302\100\0\1\303"+
    "\75\0\1\304\106\0\1\305\74\0\1\306\27\0\1\306"+
    "\57\0\1\307\27\0\1\307\30\0\1\310\34\0\1\310"+
    "\43\0\1\311\34\0\1\311\43\0\1\312\34\0\1\312"+
    "\21\0\7\23\4\313\1\0\1\23\1\0\6\313\23\23"+
    "\3\0\1\23\5\313\15\23\4\0\7\23\2\314\2\23"+
    "\1\0\1\23\1\0\31\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\1\315\30\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\7\23\1\316\21\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\15\23\1\317"+
    "\13\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\4\23\1\320\24\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\5\23\1\321\23\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\5\23\1\322\23\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\16\23\1\323"+
    "\12\23\3\0\23\23\22\0\1\324\100\0\1\325\100\0"+
    "\1\326\64\0\1\327\135\0\1\330\43\0\1\331\100\0"+
    "\1\332\120\0\1\333\130\0\1\334\54\0\1\335\124\0"+
    "\1\336\100\0\1\337\61\0\1\340\47\0\1\341\114\0"+
    "\1\342\64\0\1\343\100\0\1\344\132\0\1\345\72\0"+
    "\1\346\74\0\1\347\34\0\1\347\62\0\1\350\27\0"+
    "\1\350\50\0\1\351\27\0\1\351\50\0\1\352\27\0"+
    "\1\352\7\0\7\23\4\353\1\0\1\23\1\0\6\353"+
    "\23\23\3\0\1\23\5\353\15\23\4\0\7\23\4\354"+
    "\1\0\1\23\1\0\31\23\3\0\23\23\4\0\13\23"+
    "\1\0\1\23\1\0\21\23\1\355\7\23\3\0\23\23"+
    "\4\0\13\23\1\0\1\23\1\0\1\355\30\23\3\0"+
    "\23\23\4\0\13\23\1\0\1\23\1\0\21\23\1\356"+
    "\7\23\3\0\23\23\4\0\13\23\1\0\1\23\1\0"+
    "\10\23\1\357\20\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\16\23\1\360\12\23\3\0\23\23\43\0"+
    "\1\361\61\0\1\362\62\0\1\363\150\0\1\364\67\0"+
    "\1\365\57\0\1\366\11\0\1\367\66\0\1\370\115\0"+
    "\1\371\103\0\1\372\42\0\1\373\100\0\1\374\100\0"+
    "\1\375\132\0\1\376\104\0\1\377\27\0\1\377\44\0"+
    "\1\u0100\27\0\1\u0100\32\0\1\u0101\34\0\1\u0101\64\0"+
    "\1\u0102\27\0\1\u0102\11\0\5\23\1\u0103\5\23\1\0"+
    "\1\23\1\0\31\23\3\0\23\23\4\0\13\23\1\0"+
    "\1\23\1\0\3\23\1\316\25\23\3\0\23\23\4\0"+
    "\13\23\1\0\1\23\1\0\2\23\1\253\26\23\3\0"+
    "\23\23\56\0\1\u0104\54\0\1\u0105\72\0\1\u0106\14\0"+
    "\1\u0107\2\0\1\u0108\56\0\1\u0109\121\0\1\u010a\75\0"+
    "\1\u010b\62\0\1\u010c\100\0\1\u010d\110\0\1\u010e\124\0"+
    "\1\u010f\66\0\1\u0110\27\0\1\u0110\50\0\1\u0111\27\0"+
    "\1\u0111\44\0\1\u0112\27\0\1\u0112\14\0\7\23\4\u0113"+
    "\1\0\1\23\1\0\31\23\3\0\23\23\24\0\1\u0114"+
    "\114\0\1\u0115\100\0\1\u0116\62\0\1\u0117\110\0\1\u0118"+
    "\112\0\1\u0119\62\0\1\u011a\77\0\1\u011b\116\0\1\u011c"+
    "\65\0\1\u011d\115\0\1\u011e\57\0\1\u011f\11\0\1\u0120"+
    "\106\0\1\u0121\27\0\1\u0121\10\0\7\23\4\u0122\1\0"+
    "\1\23\1\0\31\23\3\0\23\23\40\0\1\u0123\77\0"+
    "\1\u0124\77\0\1\u0125\72\0\1\u0126\115\0\1\u0127\41\0"+
    "\1\u0128\114\0\1\u0129\110\0\1\u012a\124\0\1\u012b\54\0"+
    "\1\u012c\100\0\1\u012d\111\0\1\u012e\75\0\1\u012f\76\0"+
    "\1\u0130\50\0\1\u0131\133\0\1\u0132\71\0\1\u0133\100\0"+
    "\1\u0134\72\0\1\u0135\103\0\1\u0136\75\0\1\u0137\14\0"+
    "\1\u0138\76\0\1\u0139\101\0\1\u013a\66\0\1\u013b\77\0"+
    "\1\u013c\114\0\1\u013d\77\0\1\u013e\77\0\1\u013f\101\0"+
    "\1\u0140\72\0\1\u0141\100\0\1\u0142\106\0\1\u0143\62\0"+
    "\1\u0144\100\0\1\u0145\134\0\1\u0146\44\0\1\u0147\110\0"+
    "\1\u0148\106\0\1\u0149\77\0\1\u014a\63\0\1\u014b\134\0"+
    "\1\u014c\62\0\1\u014d\64\0\1\u014e\112\0\1\u014f\72\0"+
    "\1\u0150\56\0\1\u0151\142\0\1\u0152\54\0\1\u0153\103\0"+
    "\1\u0154\110\0\1\u0155\67\0\1\u0156\60\0\1\u0157\142\0"+
    "\1\u0158\67\0\1\u0159\63\0\1\u015a\117\0\1\u015b\71\0"+
    "\1\u015c\74\0\1\u015d\104\0\1\u015e\100\0\1\u015f\74\0"+
    "\1\u0160\111\0\1\u0161\67\0\1\u0162\60\0\1\u0163\116\0"+
    "\1\u0164\114\0\1\u0165\77\0\1\u0166\64\0\1\u0167\115\0"+
    "\1\u0168\64\0\1\u0169\113\0\1\u016a\106\0\1\u016b\56\0"+
    "\1\u016c\107\0\1\u016d\105\0\1\u016e\63\0\1\u016f\64\0"+
    "\1\u0170\131\0\1\u0171\63\0\1\u0172\123\0\1\u0173\61\0"+
    "\1\u0174\60\0\1\u0175\132\0\1\u0176\66\0\1\u0177\60\0"+
    "\1\u0178\100\0\1\u0179\116\0\1\u017a\102\0\1\u017b\60\0"+
    "\1\u017c\131\0\1\u017d\100\0\1\u017e\73\0\1\u017f\54\0"+
    "\1\u0180\100\0\1\u0181\137\0\1\u0182\73\0\1\u0183\66\0"+
    "\1\u0184\111\0\1\u0185\47\0\1\u0186\100\0\1\u0187\72\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\1\11\1\1\2\11\5\1\2\11"+
    "\17\1\1\11\15\0\1\1\1\11\7\0\15\1\4\11"+
    "\27\0\1\11\13\1\11\0\1\11\17\0\13\1\27\0"+
    "\1\11\12\1\23\0\1\1\2\0\1\11\1\0\11\1"+
    "\3\0\1\11\1\0\2\11\6\0\1\11\1\0\2\11"+
    "\6\0\6\1\2\0\1\11\7\0\3\11\1\0\1\11"+
    "\2\1\1\0\1\1\14\0\2\11\2\1\15\0\1\11"+
    "\1\1\5\0\1\11\10\0\1\11\37\0\1\11\5\0"+
    "\1\11\13\0\1\11\14\0\1\11\4\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer texto = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  private Symbol symbol(int type, Object value, int row, int col) {
      return new Symbol(type, row+1, col+1, value);
    }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AccionesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF, "");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo invalido: "+yytext());
            }
          // fall through
          case 64: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 65: break;
          case 3:
            { System.out.println(yytext());
         return symbol(sym.COMILLA, yytext());
            }
          // fall through
          case 66: break;
          case 4:
            { System.out.println(yytext());
                                    return symbol(sym.DIAGONAL, yytext());
            }
          // fall through
          case 67: break;
          case 5:
            { System.out.println(yytext());
                                    return symbol(sym.MENOR, yytext());
            }
          // fall through
          case 68: break;
          case 6:
            { System.out.println(yytext());
                                    return symbol(sym.IGUAL, yytext());
            }
          // fall through
          case 69: break;
          case 7:
            { System.out.println(yytext());
                                    return symbol(sym.MAYOR, yytext());
            }
          // fall through
          case 70: break;
          case 8:
            { texto.setLength(0); yybegin(VALOR_CORCHETES);
            }
          // fall through
          case 71: break;
          case 9:
            { System.out.println(yytext());
        return symbol(sym.BARRA, yytext());
            }
          // fall through
          case 72: break;
          case 10:
            { texto.append(yytext());
            }
          // fall through
          case 73: break;
          case 11:
            { System.out.println(yytext());
                                    return symbol(sym.NUMERO, yytext());
            }
          // fall through
          case 74: break;
          case 12:
            { texto.append('\\');
            }
          // fall through
          case 75: break;
          case 13:
            { yybegin(YYINITIAL);
                    if(!texto.toString().isBlank()){
                        System.out.println(texto.toString());
                        return symbol(sym.TEXTO, texto.toString());
                    }
            }
          // fall through
          case 76: break;
          case 14:
            { System.out.println(yytext());
                                    return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 77: break;
          case 15:
            { System.out.println(yytext());
                                    return symbol(sym.CERRAR, yytext());
            }
          // fall through
          case 78: break;
          case 16:
            { System.out.println(yytext());
                                    return symbol(sym.CADENA, yytext());
            }
          // fall through
          case 79: break;
          case 17:
            { texto.append('\"');
            }
          // fall through
          case 80: break;
          case 18:
            { texto.append('\n');
            }
          // fall through
          case 81: break;
          case 19:
            { texto.append('\r');
            }
          // fall through
          case 82: break;
          case 20:
            { texto.append('\t');
            }
          // fall through
          case 83: break;
          case 21:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_ID, yytext());
            }
          // fall through
          case 84: break;
          case 22:
            { //System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_MENU, yytext());
            }
          // fall through
          case 85: break;
          case 23:
            { System.out.println(yytext());
    return symbol(sym.VALOR, yytext());
            }
          // fall through
          case 86: break;
          case 24:
            { System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_VIDEO, yytext());
            }
          // fall through
          case 87: break;
          case 25:
            { System.out.println(yytext());
    return symbol(sym.ACCION, yytext());
            }
          // fall through
          case 88: break;
          case 26:
            { System.out.println(yytext());
    return symbol(sym.NOMBRE, yytext());
            }
          // fall through
          case 89: break;
          case 27:
            { //System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_IMAGEN, yytext());
            }
          // fall through
          case 90: break;
          case 28:
            { System.out.println(yytext());
                                    return symbol(sym.COMP_TITULO, yytext());
            }
          // fall through
          case 91: break;
          case 29:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ANCHO, yytext());
            }
          // fall through
          case 92: break;
          case 30:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_CLASE, yytext());
            }
          // fall through
          case 93: break;
          case 31:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_COLOR, yytext());
            }
          // fall through
          case 94: break;
          case 32:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PADRE, yytext());
            }
          // fall through
          case 95: break;
          case 33:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_SITIO, yytext());
            }
          // fall through
          case 96: break;
          case 34:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_TEXTO, yytext());
            }
          // fall through
          case 97: break;
          case 35:
            { System.out.println(yytext());
                                    return symbol(sym.COLOR_HEXAGONAL, yytext());
            }
          // fall through
          case 98: break;
          case 36:
            { System.out.println(yytext());
                                    return symbol(sym.VALOR_ALINEACION, yytext());
            }
          // fall through
          case 99: break;
          case 37:
            { //System.out.println(yytext());
                                    return symbol(sym.COMP_PARRAFO, yytext());
            }
          // fall through
          case 100: break;
          case 38:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALTURA, yytext());
            }
          // fall through
          case 101: break;
          case 39:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ORIGEN, yytext());
            }
          // fall through
          case 102: break;
          case 40:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PAGINA, yytext());
            }
          // fall through
          case 103: break;
          case 41:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_TITULO, yytext());
            }
          // fall through
          case 104: break;
          case 42:
            { System.out.println(yytext());
    return symbol(sym.ACCIONES, yytext());
            }
          // fall through
          case 105: break;
          case 43:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTO, yytext());
            }
          // fall through
          case 106: break;
          case 44:
            { System.out.println(yytext());
    return symbol(sym.ETIQUETA, yytext());
            }
          // fall through
          case 107: break;
          case 45:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTOS, yytext());
            }
          // fall through
          case 108: break;
          case 46:
            { System.out.println(yytext());

    return symbol(sym.ETIQUETAS, yytext());
            }
          // fall through
          case 109: break;
          case 47:
            { System.out.println(yytext());
    return symbol(sym.PARAMETRO, yytext());
            }
          // fall through
          case 110: break;
          case 48:
            { System.out.println(yytext());
    return symbol(sym.PARAMETROS, yytext());
            }
          // fall through
          case 111: break;
          case 49:
            { System.out.println(yytext());
                                    return symbol(sym.FECHA, yytext());
            }
          // fall through
          case 112: break;
          case 50:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ETIQUETAS, yytext());
            }
          // fall through
          case 113: break;
          case 51:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALINEACION, yytext());
            }
          // fall through
          case 114: break;
          case 52:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVA_PAGINA, yytext());
            }
          // fall through
          case 115: break;
          case 53:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_PAGINA, yytext());
            }
          // fall through
          case 116: break;
          case 54:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_CREACION, yytext());
            }
          // fall through
          case 117: break;
          case 55:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVO_SITIO, yytext());
            }
          // fall through
          case 118: break;
          case 56:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_SITIO_WEB, yytext());
            }
          // fall through
          case 119: break;
          case 57:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_PAGINA, yytext());
            }
          // fall through
          case 120: break;
          case 58:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_CREACION, yytext());
            }
          // fall through
          case 121: break;
          case 59:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_COMPONENTE, yytext());
            }
          // fall through
          case 122: break;
          case 60:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 123: break;
          case 61:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 124: break;
          case 62:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 125: break;
          case 63:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_MODIFICACION, yytext());
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
