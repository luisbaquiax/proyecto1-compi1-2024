// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: acciones.jflex


/* codigo de usuario */
package com.luis.proyectoservidor.lexer;
import com.luis.proyectoservidor.parser.sym;
import java.util.ArrayList;
import java.io.StringReader;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class AccionesLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int VALOR_CORCHETES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  4,  5,  6,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8, 
     9, 10, 11, 12, 12, 12, 12, 12, 12, 12,  0,  0, 13, 14, 15,  0, 
     0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
    31, 32, 33, 34, 35, 36, 37, 38, 39, 26, 40, 41,  0,  0,  0, 42, 
     0, 43, 44, 45, 46, 47, 46, 26, 26, 48, 26, 26, 49, 50, 51, 52, 
    53, 54, 55, 56, 57, 58, 59, 26, 26, 26, 26,  0,  0,  0,  0,  0, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\5\1\1\7\4\10\2\11\10\10\1\0\1\12\23\0"+
    "\1\13\1\0\1\14\1\11\40\0\1\11\21\0\1\15"+
    "\20\0\1\11\5\0\1\16\31\0\1\17\11\0\1\20"+
    "\22\0\1\21\2\0\1\22\5\0\1\23\3\0\1\24"+
    "\3\0\1\25\1\0\1\26\1\27\5\0\1\30\1\0"+
    "\1\31\1\32\6\0\1\33\1\0\1\34\1\35\2\0"+
    "\1\36\2\0\1\37\6\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\17\0\1\46\1\47\1\50\1\0"+
    "\1\51\15\0\1\52\1\53\1\54\15\0\1\55\37\0"+
    "\1\56\5\0\1\57\13\0\1\60\14\0\1\61\4\0"+
    "\1\62\2\0\1\63\1\64\2\0\1\65\3\0\1\66"+
    "\1\67\4\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\172\0\267\0\364\0\172\0\172"+
    "\0\172\0\172\0\u0131\0\u016e\0\u01ab\0\u01e8\0\u0225\0\172"+
    "\0\172\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\172"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0262\0\172\0\u0a02\0\u02dc\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u1629\0\172\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\172\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\172\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\172\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\172\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\172\0\u29f0\0\u2a2d\0\u2a6a\0\172\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\172\0\u2b5e\0\172\0\172\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u2c8f\0\172\0\u2ccc\0\172\0\172\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\172\0\u2e77\0\172\0\172\0\u2eb4"+
    "\0\u2ef1\0\172\0\u2f2e\0\u2f6b\0\172\0\u2fa8\0\u2fe5\0\u3022"+
    "\0\u305f\0\u309c\0\u30d9\0\172\0\172\0\172\0\u3116\0\172"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u3523\0\172\0\172\0\u3560\0\u359d\0\172\0\u35da\0\u3617"+
    "\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff"+
    "\0\u383c\0\u3879\0\u38b6\0\172\0\172\0\172\0\u38f3\0\u3930"+
    "\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18"+
    "\0\u3b55\0\u3b92\0\u3bcf\0\172\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3"+
    "\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3eab"+
    "\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093"+
    "\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b"+
    "\0\u42b8\0\u42f5\0\u4332\0\172\0\u436f\0\u43ac\0\u43e9\0\u4426"+
    "\0\u4463\0\172\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1"+
    "\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\172\0\u473f\0\u477c"+
    "\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\172\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\172"+
    "\0\u4b0f\0\u4b4c\0\172\0\172\0\u4b89\0\u4bc6\0\172\0\u4c03"+
    "\0\u4c40\0\u4c7d\0\172\0\172\0\u4cba\0\u4cf7\0\u4d34\0\u4d71"+
    "\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\3\3\1\7\4\3\1\10"+
    "\1\11\1\12\1\13\3\3\1\14\10\3\1\15\1\3"+
    "\1\16\5\3\1\17\3\3\1\20\1\3\1\13\3\3"+
    "\1\14\3\3\1\15\1\3\1\16\5\3\1\17\1\3"+
    "\4\21\1\22\1\23\2\24\1\21\1\25\2\26\1\25"+
    "\5\21\1\27\1\30\4\21\1\31\1\32\2\21\1\33"+
    "\2\21\1\34\3\21\1\35\1\21\1\36\4\21\1\24"+
    "\21\21\1\3\77\0\1\4\72\0\4\37\1\40\13\37"+
    "\1\41\1\42\1\43\2\37\1\44\2\37\1\45\3\37"+
    "\1\46\1\47\1\50\1\51\2\37\1\52\1\53\1\54"+
    "\30\37\22\0\1\55\20\0\1\56\11\0\1\55\13\0"+
    "\1\56\46\0\1\57\25\0\1\57\41\0\1\60\25\0"+
    "\1\60\30\0\1\61\32\0\1\61\41\0\1\62\32\0"+
    "\1\62\21\0\4\63\1\64\70\63\11\0\4\65\3\0"+
    "\6\65\25\0\5\65\26\0\4\66\3\0\31\66\2\0"+
    "\21\66\12\0\4\25\71\0\4\67\104\0\1\70\74\0"+
    "\1\71\104\0\1\72\13\0\1\73\70\0\1\74\54\0"+
    "\1\75\70\0\1\76\104\0\1\77\74\0\1\100\44\0"+
    "\4\37\1\40\74\37\1\40\21\37\1\101\4\37\1\102"+
    "\1\37\1\103\43\37\1\40\31\37\1\104\42\37\1\40"+
    "\26\37\1\105\2\37\1\106\42\37\1\40\17\37\1\107"+
    "\54\37\1\40\16\37\1\110\55\37\1\40\31\37\1\111"+
    "\42\37\1\40\37\37\1\112\34\37\1\40\34\37\1\113"+
    "\37\37\1\40\13\37\1\114\60\37\1\40\23\37\1\115"+
    "\50\37\1\40\17\37\1\116\3\37\1\117\50\37\1\40"+
    "\35\37\1\120\32\37\22\0\1\121\32\0\1\121\60\0"+
    "\1\122\25\0\1\122\35\0\1\123\27\0\1\123\50\0"+
    "\1\124\25\0\1\124\53\0\1\125\25\0\1\125\40\0"+
    "\1\126\25\0\1\126\24\0\4\127\3\0\6\127\25\0"+
    "\5\127\26\0\4\130\115\0\1\131\100\0\1\132\53\0"+
    "\1\133\114\0\1\134\76\0\1\135\67\0\1\136\100\0"+
    "\1\137\76\0\1\140\54\0\1\141\51\0\4\37\1\40"+
    "\34\37\1\142\37\37\1\40\23\37\1\143\12\37\1\144"+
    "\35\37\1\40\15\37\1\145\56\37\1\40\34\37\1\146"+
    "\37\37\1\40\13\37\1\147\60\37\1\40\26\37\1\150"+
    "\45\37\1\40\15\37\1\151\56\37\1\152\74\37\1\40"+
    "\16\37\1\153\55\37\1\40\17\37\1\154\54\37\1\40"+
    "\23\37\1\155\50\37\1\40\16\37\1\156\2\37\1\157"+
    "\52\37\1\40\36\37\1\160\35\37\1\40\42\37\1\161"+
    "\31\37\1\40\36\37\1\162\35\37\1\40\37\37\1\163"+
    "\30\37\30\0\1\164\27\0\1\164\44\0\1\165\27\0"+
    "\1\165\54\0\1\166\25\0\1\166\27\0\1\167\32\0"+
    "\1\167\40\0\1\170\32\0\1\170\57\0\1\171\25\0"+
    "\1\171\21\0\4\172\3\0\6\172\25\0\5\172\26\0"+
    "\4\173\123\0\1\174\55\0\1\175\76\0\1\176\112\0"+
    "\1\177\73\0\1\200\75\0\1\201\71\0\1\202\77\0"+
    "\1\203\54\0\1\204\50\0\4\37\1\40\17\37\1\205"+
    "\54\37\1\40\30\37\1\206\43\37\1\40\37\37\1\207"+
    "\34\37\1\40\22\37\1\210\51\37\1\40\34\37\1\211"+
    "\37\37\1\40\35\37\1\212\36\37\1\40\31\37\1\213"+
    "\42\37\1\40\22\37\1\214\51\37\1\40\23\37\1\215"+
    "\50\37\1\40\40\37\1\216\33\37\1\40\21\37\1\217"+
    "\52\37\1\40\34\37\1\220\37\37\1\40\23\37\1\221"+
    "\50\37\1\40\23\37\1\222\50\37\1\40\36\37\1\223"+
    "\35\37\1\40\37\37\1\224\34\37\1\40\13\37\1\225"+
    "\54\37\36\0\1\226\25\0\1\226\31\0\1\227\32\0"+
    "\1\227\64\0\1\230\25\0\1\230\43\0\1\231\25\0"+
    "\1\231\41\0\1\232\25\0\1\232\53\0\1\233\25\0"+
    "\1\233\16\0\4\234\3\0\6\234\25\0\5\234\24\0"+
    "\1\235\1\0\4\25\121\0\1\236\55\0\1\237\76\0"+
    "\1\240\100\0\1\241\74\0\1\242\64\0\1\243\107\0"+
    "\1\244\77\0\1\245\36\0\4\37\1\40\21\37\1\246"+
    "\52\37\1\40\17\37\1\247\54\37\1\40\34\37\1\250"+
    "\37\37\1\40\31\37\1\251\42\37\1\40\13\37\1\252"+
    "\60\37\1\40\17\37\1\253\54\37\1\40\34\37\1\254"+
    "\37\37\1\40\13\37\1\255\60\37\1\40\20\37\1\256"+
    "\53\37\1\40\13\37\1\257\15\37\1\260\42\37\1\40"+
    "\17\37\1\261\54\37\1\40\17\37\1\262\54\37\1\40"+
    "\30\37\1\263\43\37\1\40\31\37\1\264\42\37\1\40"+
    "\31\37\1\265\42\37\1\40\26\37\1\266\45\37\1\40"+
    "\34\37\1\267\33\37\35\0\1\270\25\0\1\270\55\0"+
    "\1\271\25\0\1\271\26\0\1\272\32\0\1\272\41\0"+
    "\1\273\32\0\1\273\41\0\1\274\32\0\1\274\26\0"+
    "\4\275\3\0\6\275\25\0\5\275\26\0\2\276\102\0"+
    "\1\277\103\0\1\300\102\0\1\301\63\0\1\302\75\0"+
    "\1\303\74\0\1\304\105\0\1\305\36\0\4\37\1\40"+
    "\13\37\1\306\60\37\1\40\13\37\1\307\60\37\1\40"+
    "\13\37\1\310\60\37\1\311\74\37\1\40\34\37\1\312"+
    "\37\37\1\313\74\37\1\314\74\37\1\40\45\37\1\315"+
    "\26\37\1\40\23\37\1\316\50\37\1\40\45\37\1\317"+
    "\26\37\1\40\45\37\1\320\26\37\1\40\30\37\1\321"+
    "\43\37\1\322\74\37\1\40\13\37\1\323\60\37\1\324"+
    "\74\37\1\325\74\37\1\40\31\37\1\326\42\37\1\40"+
    "\23\37\1\327\44\37\24\0\1\330\32\0\1\330\60\0"+
    "\1\331\25\0\1\331\46\0\1\332\25\0\1\332\46\0"+
    "\1\333\25\0\1\333\14\0\4\334\3\0\6\334\25\0"+
    "\5\334\26\0\4\335\121\0\1\336\53\0\1\337\115\0"+
    "\1\340\63\0\1\341\102\0\1\342\36\0\4\37\1\40"+
    "\34\37\1\343\37\37\1\40\15\37\1\344\56\37\1\345"+
    "\74\37\1\40\45\37\1\346\26\37\1\40\15\37\1\347"+
    "\11\37\1\350\44\37\1\40\15\37\1\351\56\37\1\40"+
    "\32\37\1\352\41\37\1\40\35\37\1\353\36\37\1\354"+
    "\74\37\1\355\74\37\1\356\74\37\1\40\31\37\1\357"+
    "\36\37\42\0\1\360\25\0\1\360\42\0\1\361\25\0"+
    "\1\361\30\0\1\362\32\0\1\362\62\0\1\363\25\0"+
    "\1\363\14\0\1\364\110\0\1\365\73\0\1\366\52\0"+
    "\4\37\1\40\45\37\1\367\26\37\1\40\23\37\1\370"+
    "\50\37\1\40\15\37\1\371\14\37\1\372\2\37\1\373"+
    "\36\37\1\40\34\37\1\374\37\37\1\40\31\37\1\375"+
    "\42\37\1\40\13\37\1\376\60\37\1\40\13\37\1\377"+
    "\60\37\1\40\23\37\1\u0100\50\37\1\40\45\37\1\u0101"+
    "\22\37\42\0\1\u0102\25\0\1\u0102\46\0\1\u0103\25\0"+
    "\1\u0103\42\0\1\u0104\25\0\1\u0104\21\0\4\u0105\100\0"+
    "\1\u0106\74\0\1\u0107\54\0\4\37\1\40\15\37\1\u0108"+
    "\56\37\1\40\31\37\1\u0109\42\37\1\40\31\37\1\u010a"+
    "\42\37\1\40\13\37\1\u010b\60\37\1\40\23\37\1\u010c"+
    "\50\37\1\40\17\37\1\u010d\54\37\1\40\16\37\1\u010e"+
    "\55\37\1\40\34\37\1\u010f\37\37\1\40\21\37\1\u0110"+
    "\52\37\1\40\36\37\1\u0111\35\37\1\40\15\37\1\u0112"+
    "\11\37\1\u0113\40\37\42\0\1\u0114\25\0\1\u0114\15\0"+
    "\4\u0115\121\0\1\u0116\33\0\4\37\1\40\31\37\1\u0117"+
    "\42\37\1\40\30\37\1\u0118\43\37\1\40\27\37\1\u0119"+
    "\44\37\1\40\21\37\1\u011a\52\37\1\40\36\37\1\u011b"+
    "\35\37\1\40\13\37\1\u011c\60\37\1\40\23\37\1\u011d"+
    "\50\37\1\40\45\37\1\u011e\26\37\1\40\23\37\1\u011f"+
    "\50\37\1\40\23\37\1\u0120\50\37\1\40\34\37\1\u0121"+
    "\37\37\1\40\31\37\1\u0122\42\37\1\40\27\37\1\u0123"+
    "\44\37\1\u0124\74\37\1\40\32\37\1\u0125\41\37\1\40"+
    "\23\37\1\u0126\50\37\1\40\23\37\1\u0127\50\37\1\40"+
    "\15\37\1\u0128\56\37\1\40\20\37\1\u0129\53\37\1\40"+
    "\15\37\1\u012a\14\37\1\u012b\41\37\1\40\30\37\1\u012c"+
    "\43\37\1\40\31\37\1\u012d\42\37\1\40\17\37\1\u012e"+
    "\54\37\1\40\16\37\1\u012f\55\37\1\40\32\37\1\u0130"+
    "\41\37\1\40\31\37\1\u0131\42\37\1\40\30\37\1\u0132"+
    "\43\37\1\40\31\37\1\u0133\42\37\1\40\23\37\1\u0134"+
    "\50\37\1\40\23\37\1\u0135\50\37\1\40\31\37\1\u0136"+
    "\42\37\1\40\13\37\1\u0137\60\37\1\40\13\37\1\u0138"+
    "\60\37\1\40\45\37\1\u0139\26\37\1\40\13\37\1\u013a"+
    "\60\37\1\40\23\37\1\u013b\50\37\1\40\31\37\1\u013c"+
    "\42\37\1\40\30\37\1\u013d\43\37\1\40\13\37\1\u013e"+
    "\60\37\1\40\45\37\1\u013f\26\37\1\40\31\37\1\u0140"+
    "\42\37\1\40\15\37\1\u0141\56\37\1\40\27\37\1\u0142"+
    "\44\37\1\40\21\37\1\u0143\52\37\1\u0144\74\37\1\40"+
    "\41\37\1\u0145\32\37\1\40\15\37\1\u0146\56\37\1\40"+
    "\20\37\1\u0147\53\37\1\40\30\37\1\u0148\43\37\1\40"+
    "\17\37\1\u0149\54\37\1\u014a\74\37\1\40\41\37\1\u014b"+
    "\32\37\1\40\30\37\1\u014c\43\37\1\40\13\37\1\u014d"+
    "\60\37\1\40\32\37\1\u014e\41\37\1\40\23\37\1\u014f"+
    "\50\37\1\40\17\37\1\u0150\54\37\1\40\23\37\1\u0151"+
    "\50\37\1\40\23\37\1\u0152\50\37\1\40\17\37\1\u0153"+
    "\54\37\1\40\30\37\1\u0154\43\37\1\40\17\37\1\u0155"+
    "\54\37\1\u0156\74\37\1\40\15\37\1\u0157\56\37\1\40"+
    "\31\37\1\u0158\42\37\1\40\30\37\1\u0159\43\37\1\40"+
    "\14\37\1\u015a\57\37\1\40\31\37\1\u015b\42\37\1\40"+
    "\15\37\1\u015c\56\37\1\40\30\37\1\u015d\43\37\1\40"+
    "\36\37\1\u015e\35\37\1\40\14\37\1\u015f\57\37\1\40"+
    "\23\37\1\u0160\50\37\1\40\30\37\1\u0161\43\37\1\40"+
    "\13\37\1\u0162\60\37\1\u0163\74\37\1\40\30\37\1\u0164"+
    "\43\37\1\40\13\37\1\u0165\60\37\1\40\36\37\1\u0166"+
    "\35\37\1\40\17\37\1\u0167\54\37\1\u0168\74\37\1\40"+
    "\31\37\1\u0169\42\37\1\40\17\37\1\u016a\54\37\1\u016b"+
    "\74\37\1\u016c\74\37\1\40\15\37\1\u016d\56\37\1\40"+
    "\17\37\1\u016e\54\37\1\u016f\74\37\1\40\30\37\1\u0170"+
    "\43\37\1\40\30\37\1\u0171\43\37\1\40\23\37\1\u0172"+
    "\50\37\1\u0173\74\37\1\u0174\74\37\1\40\36\37\1\u0175"+
    "\35\37\1\40\31\37\1\u0176\42\37\1\40\17\37\1\u0177"+
    "\54\37\1\40\30\37\1\u0178\43\37\1\u0179\74\37\1\u017a"+
    "\70\37";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19886];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\4\11\5\1\2\11\15\1\1\0"+
    "\1\11\23\0\1\11\1\0\2\1\40\0\1\1\21\0"+
    "\1\11\20\0\1\1\5\0\1\11\31\0\1\11\11\0"+
    "\1\11\22\0\1\1\2\0\1\11\5\0\1\11\3\0"+
    "\1\11\3\0\1\11\1\0\2\11\5\0\1\11\1\0"+
    "\2\11\6\0\1\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\6\0\3\11\1\0\1\11\2\1\17\0\2\11"+
    "\1\1\1\0\1\11\15\0\3\11\15\0\1\11\37\0"+
    "\1\11\5\0\1\11\13\0\1\11\14\0\1\11\4\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\4\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer texto = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  private Symbol symbol(int type, Object value, int row, int col) {
      return new Symbol(type, row+1, col+1, value);
    }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AccionesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF, "");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo invalido: "+yytext());
            }
          // fall through
          case 58: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 59: break;
          case 3:
            { System.out.println(yytext());
                                    return symbol(sym.DIAGONAL, yytext());
            }
          // fall through
          case 60: break;
          case 4:
            { System.out.println(yytext());
                                    return symbol(sym.MENOR_QUE, yytext());
            }
          // fall through
          case 61: break;
          case 5:
            { System.out.println(yytext());
                                    return symbol(sym.IGUAL, yytext());
            }
          // fall through
          case 62: break;
          case 6:
            { System.out.println(yytext());
                                    return symbol(sym.MAYOR_QUE, yytext());
            }
          // fall through
          case 63: break;
          case 7:
            { texto.setLength(0); yybegin(VALOR_CORCHETES);
            }
          // fall through
          case 64: break;
          case 8:
            { texto.append(yytext());
            }
          // fall through
          case 65: break;
          case 9:
            { System.out.println(yytext());
                                    return symbol(sym.NUMERO, yytext());
            }
          // fall through
          case 66: break;
          case 10:
            { System.out.println(yytext());
         return symbol(sym.CADENA, yytext());
            }
          // fall through
          case 67: break;
          case 11:
            { System.out.println(yytext());
                                    return symbol(sym.CADENA, yytext());
            }
          // fall through
          case 68: break;
          case 12:
            { System.out.println(yytext());
                                    return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 69: break;
          case 13:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_ID, yytext());
            }
          // fall through
          case 70: break;
          case 14:
            { //System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_MENU, yytext());
            }
          // fall through
          case 71: break;
          case 15:
            { System.out.println(yytext());
    return symbol(sym.VALOR, yytext());
            }
          // fall through
          case 72: break;
          case 16:
            { System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_VIDEO, yytext());
            }
          // fall through
          case 73: break;
          case 17:
            { System.out.println(yytext());
    return symbol(sym.ACCION, yytext());
            }
          // fall through
          case 74: break;
          case 18:
            { System.out.println(yytext());
    return symbol(sym.NOMBRE, yytext());
            }
          // fall through
          case 75: break;
          case 19:
            { //System.out.println(yytext());
                                    return symbol(sym.COMPONENTE_IMAGEN, yytext());
            }
          // fall through
          case 76: break;
          case 20:
            { System.out.println(yytext());
                                    return symbol(sym.COMP_TITULO, yytext());
            }
          // fall through
          case 77: break;
          case 21:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ANCHO, yytext());
            }
          // fall through
          case 78: break;
          case 22:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_CLASE, yytext());
            }
          // fall through
          case 79: break;
          case 23:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_COLOR, yytext());
            }
          // fall through
          case 80: break;
          case 24:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PADRE, yytext());
            }
          // fall through
          case 81: break;
          case 25:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_SITIO, yytext());
            }
          // fall through
          case 82: break;
          case 26:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_TEXTO, yytext());
            }
          // fall through
          case 83: break;
          case 27:
            { System.out.println(yytext());
                                    return symbol(sym.COLOR_HEXAGONAL, yytext());
            }
          // fall through
          case 84: break;
          case 28:
            { System.out.println(yytext());
                                    return symbol(sym.VALOR_ATRIBUTO_CENTRAR, yytext());
            }
          // fall through
          case 85: break;
          case 29:
            { System.out.println(yytext());
                                    return symbol(sym.VALOR_ATRIBUTO_DERECHA, yytext());
            }
          // fall through
          case 86: break;
          case 30:
            { //System.out.println(yytext());
                                    return symbol(sym.COMP_PARRAFO, yytext());
            }
          // fall through
          case 87: break;
          case 31:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALTURA, yytext());
            }
          // fall through
          case 88: break;
          case 32:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ORIGEN, yytext());
            }
          // fall through
          case 89: break;
          case 33:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PAGINA, yytext());
            }
          // fall through
          case 90: break;
          case 34:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_TITULO, yytext());
            }
          // fall through
          case 91: break;
          case 35:
            { System.out.println(yytext());
    return symbol(sym.ACCIONES, yytext());
            }
          // fall through
          case 92: break;
          case 36:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTO, yytext());
            }
          // fall through
          case 93: break;
          case 37:
            { System.out.println(yytext());
    return symbol(sym.ETIQUETA, yytext());
            }
          // fall through
          case 94: break;
          case 38:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTOS, yytext());
            }
          // fall through
          case 95: break;
          case 39:
            { System.out.println(yytext());

    return symbol(sym.ETIQUETAS, yytext());
            }
          // fall through
          case 96: break;
          case 40:
            { System.out.println(yytext());
    return symbol(sym.PARAMETRO, yytext());
            }
          // fall through
          case 97: break;
          case 41:
            { System.out.println(yytext());
                                    return symbol(sym.VALOR_ATRIBUTO_IZQUIERDA, yytext());
            }
          // fall through
          case 98: break;
          case 42:
            { System.out.println(yytext());
    return symbol(sym.PARAMETROS, yytext());
            }
          // fall through
          case 99: break;
          case 43:
            { System.out.println(yytext());
                                    return symbol(sym.FECHA, yytext());
            }
          // fall through
          case 100: break;
          case 44:
            { System.out.println(yytext());
                                    return symbol(sym.VALOR_ATRIBUTO_JUSTIFICAR, yytext());
            }
          // fall through
          case 101: break;
          case 45:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALINEACION, yytext());
            }
          // fall through
          case 102: break;
          case 46:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVA_PAGINA, yytext());
            }
          // fall through
          case 103: break;
          case 47:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_PAGINA, yytext());
            }
          // fall through
          case 104: break;
          case 48:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_CREACION, yytext());
            }
          // fall through
          case 105: break;
          case 49:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVO_SITIO, yytext());
            }
          // fall through
          case 106: break;
          case 50:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_SITIO_WEB, yytext());
            }
          // fall through
          case 107: break;
          case 51:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_PAGINA, yytext());
            }
          // fall through
          case 108: break;
          case 52:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_CREACION, yytext());
            }
          // fall through
          case 109: break;
          case 53:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_COMPONENTE, yytext());
            }
          // fall through
          case 110: break;
          case 54:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 111: break;
          case 55:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 112: break;
          case 56:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 113: break;
          case 57:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_MODIFICACION, yytext());
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
