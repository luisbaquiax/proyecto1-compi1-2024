// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: acciones.jflex


/* codigo de usuario */
package com.luis.proyectoservidor.lexer;
import com.luis.proyectoservidor.parser.sym;
import java.util.*;
import java.io.StringReader;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class AccionesLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int VALOR_CORCHETES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  5,  6,  5,  7,  5,  5,  0,  5,  5,  5,  5,  5,  7,  5,  8, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  5,  0, 10, 11, 12,  0, 
     5, 13, 14, 15, 16, 17, 18, 19, 20, 21,  9,  9, 22, 23, 24, 25, 
    26, 27, 28, 29, 30, 31, 32, 33, 34,  9,  9, 35, 36, 37,  0, 38, 
     0, 39, 40, 41,  9, 42,  9,  9,  9, 43,  9,  9, 44, 45, 46, 47, 
    48, 27, 49, 50, 51, 52, 53,  9,  9,  9,  9,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\5\1\1\10\1\11\1\12\1\13\1\0\1\14"+
    "\14\0\1\15\1\16\6\0\1\17\1\20\1\21\1\22"+
    "\36\0\1\23\45\0\1\24\22\0\1\25\2\0\1\26"+
    "\4\0\1\27\1\0\1\30\1\31\5\0\1\32\1\0"+
    "\1\33\1\34\10\0\1\35\6\0\1\36\1\37\1\40"+
    "\1\0\1\41\1\42\1\43\14\0\1\44\1\45\1\46"+
    "\14\0\1\47\15\0\1\50\37\0\1\51\5\0\1\52"+
    "\13\0\1\53\14\0\1\54\4\0\1\55\2\0\1\56"+
    "\1\57\2\0\1\60\3\0\1\61\1\62\4\0\1\63"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\u010e\0\154"+
    "\0\u0144\0\154\0\154\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252"+
    "\0\154\0\u0288\0\u02be\0\154\0\u02f4\0\154\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u010e\0\154\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\154\0\154\0\154\0\154\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\154\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\154\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\154\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\154\0\u1a5e\0\154"+
    "\0\154\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\154\0\u1ba2"+
    "\0\154\0\154\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\154\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\154\0\154\0\154\0\u1ecc\0\154\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\154\0\154\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\154\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\154\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\154\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\154"+
    "\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u3126\0\154\0\u315c\0\u3192\0\u31c8\0\u31fe"+
    "\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae"+
    "\0\154\0\u33e4\0\u341a\0\u3450\0\u3486\0\154\0\u34bc\0\u34f2"+
    "\0\154\0\154\0\u3528\0\u355e\0\154\0\u3594\0\u35ca\0\u3600"+
    "\0\154\0\154\0\u3636\0\u366c\0\u36a2\0\u36d8\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\3\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\3\3\1\15\6\3"+
    "\1\16\1\3\1\17\5\3\1\20\2\3\1\21\2\3"+
    "\1\7\1\14\2\3\1\15\3\3\1\16\1\3\1\17"+
    "\4\3\1\20\4\3\6\22\1\3\1\22\1\3\26\22"+
    "\1\3\1\23\1\24\20\22\70\0\1\4\63\0\6\25"+
    "\1\26\6\25\1\27\1\30\1\31\2\25\1\32\2\25"+
    "\1\33\1\25\1\34\1\35\1\36\1\37\2\25\1\40"+
    "\1\41\1\42\26\25\11\0\1\43\3\0\26\43\4\0"+
    "\17\43\10\0\1\44\74\0\1\45\16\0\1\46\12\0"+
    "\1\45\11\0\1\46\40\0\1\47\24\0\1\47\33\0"+
    "\1\50\25\0\1\50\23\0\1\51\31\0\1\51\33\0"+
    "\1\52\31\0\1\52\22\0\6\22\1\0\1\22\1\0"+
    "\26\22\3\0\20\22\6\0\1\53\47\0\1\54\2\0"+
    "\1\55\1\0\1\56\2\0\6\25\1\26\65\25\1\26"+
    "\14\25\1\57\2\25\1\60\1\25\1\61\43\25\1\26"+
    "\22\25\1\62\42\25\1\26\17\25\1\63\2\25\1\64"+
    "\42\25\1\26\12\25\1\65\52\25\1\26\11\25\1\66"+
    "\53\25\1\26\22\25\1\67\42\25\1\26\30\25\1\70"+
    "\34\25\1\26\25\25\1\71\37\25\1\26\6\25\1\72"+
    "\56\25\1\26\16\25\1\73\46\25\1\26\12\25\1\74"+
    "\3\25\1\75\46\25\1\26\26\25\1\76\30\25\17\0"+
    "\1\77\31\0\1\77\50\0\1\100\24\0\1\100\31\0"+
    "\1\101\25\0\1\101\41\0\1\102\25\0\1\102\44\0"+
    "\1\103\24\0\1\103\32\0\1\104\25\0\1\104\11\0"+
    "\6\25\1\26\25\25\1\105\37\25\1\26\16\25\1\106"+
    "\10\25\1\107\35\25\1\26\10\25\1\110\54\25\1\26"+
    "\25\25\1\111\37\25\1\26\6\25\1\112\56\25\1\26"+
    "\17\25\1\113\45\25\1\26\10\25\1\114\54\25\1\115"+
    "\65\25\1\26\11\25\1\116\53\25\1\26\12\25\1\117"+
    "\52\25\1\26\16\25\1\120\46\25\1\26\11\25\1\121"+
    "\2\25\1\122\50\25\1\26\27\25\1\123\35\25\1\26"+
    "\33\25\1\124\31\25\1\26\27\25\1\125\35\25\1\26"+
    "\30\25\1\126\26\25\25\0\1\127\25\0\1\127\37\0"+
    "\1\130\25\0\1\130\45\0\1\131\50\0\1\132\31\0"+
    "\1\132\32\0\1\133\31\0\1\133\47\0\1\134\25\0"+
    "\1\134\6\0\6\25\1\26\12\25\1\135\52\25\1\26"+
    "\21\25\1\136\43\25\1\26\30\25\1\137\34\25\1\26"+
    "\15\25\1\140\47\25\1\26\25\25\1\141\37\25\1\26"+
    "\26\25\1\142\36\25\1\26\22\25\1\143\42\25\1\26"+
    "\15\25\1\144\47\25\1\26\16\25\1\145\46\25\1\26"+
    "\31\25\1\146\33\25\1\26\14\25\1\147\50\25\1\26"+
    "\25\25\1\150\37\25\1\26\16\25\1\151\46\25\1\26"+
    "\16\25\1\152\46\25\1\26\27\25\1\153\35\25\1\26"+
    "\30\25\1\154\34\25\1\26\6\25\1\155\50\25\31\0"+
    "\1\156\25\0\1\156\24\0\1\157\31\0\1\157\54\0"+
    "\1\160\24\0\1\160\35\0\1\161\24\0\1\161\33\0"+
    "\1\162\25\0\1\162\44\0\1\163\24\0\1\163\4\0"+
    "\6\25\1\26\14\25\1\164\50\25\1\26\12\25\1\165"+
    "\52\25\1\26\25\25\1\166\37\25\1\26\22\25\1\167"+
    "\42\25\1\26\6\25\1\170\56\25\1\26\12\25\1\171"+
    "\52\25\1\26\25\25\1\172\37\25\1\26\6\25\1\173"+
    "\56\25\1\26\13\25\1\174\51\25\1\26\6\25\1\175"+
    "\13\25\1\176\42\25\1\26\12\25\1\177\52\25\1\26"+
    "\12\25\1\200\52\25\1\26\21\25\1\201\43\25\1\26"+
    "\22\25\1\202\42\25\1\26\22\25\1\203\42\25\1\26"+
    "\17\25\1\204\45\25\1\26\25\25\1\205\31\25\30\0"+
    "\1\206\25\0\1\206\46\0\1\207\24\0\1\207\22\0"+
    "\1\210\30\0\1\210\34\0\1\211\30\0\1\211\34\0"+
    "\1\212\30\0\1\212\13\0\6\25\1\26\6\25\1\213"+
    "\56\25\1\26\6\25\1\214\56\25\1\26\6\25\1\215"+
    "\56\25\1\216\65\25\1\26\25\25\1\217\37\25\1\220"+
    "\65\25\1\221\65\25\1\26\37\25\1\222\25\25\1\26"+
    "\16\25\1\223\46\25\1\26\37\25\1\224\25\25\1\26"+
    "\37\25\1\225\25\25\1\26\21\25\1\226\43\25\1\227"+
    "\65\25\1\26\6\25\1\230\56\25\1\231\65\25\1\232"+
    "\65\25\1\26\22\25\1\233\42\25\1\26\16\25\1\234"+
    "\40\25\21\0\1\235\30\0\1\235\51\0\1\236\24\0"+
    "\1\236\40\0\1\237\24\0\1\237\40\0\1\240\24\0"+
    "\1\240\2\0\6\25\1\26\25\25\1\241\37\25\1\26"+
    "\10\25\1\242\54\25\1\243\65\25\1\26\37\25\1\244"+
    "\25\25\1\26\10\25\1\245\7\25\1\246\44\25\1\26"+
    "\10\25\1\247\54\25\1\26\23\25\1\250\41\25\1\26"+
    "\26\25\1\251\36\25\1\252\65\25\1\253\65\25\1\254"+
    "\65\25\1\26\22\25\1\255\34\25\35\0\1\256\24\0"+
    "\1\256\34\0\1\257\25\0\1\257\23\0\1\260\31\0"+
    "\1\260\52\0\1\261\24\0\1\261\4\0\6\25\1\26"+
    "\37\25\1\262\25\25\1\26\16\25\1\263\46\25\1\26"+
    "\10\25\1\264\12\25\1\265\2\25\1\266\36\25\1\26"+
    "\25\25\1\267\37\25\1\26\22\25\1\270\42\25\1\26"+
    "\6\25\1\271\56\25\1\26\6\25\1\272\56\25\1\26"+
    "\16\25\1\273\46\25\1\26\37\25\1\274\17\25\35\0"+
    "\1\275\24\0\1\275\40\0\1\276\24\0\1\276\34\0"+
    "\1\277\25\0\1\277\6\0\6\25\1\26\10\25\1\300"+
    "\54\25\1\26\22\25\1\301\42\25\1\26\22\25\1\302"+
    "\42\25\1\26\6\25\1\303\56\25\1\26\16\25\1\304"+
    "\46\25\1\26\12\25\1\305\52\25\1\26\11\25\1\306"+
    "\53\25\1\26\25\25\1\307\37\25\1\26\14\25\1\310"+
    "\50\25\1\26\27\25\1\311\35\25\1\26\10\25\1\312"+
    "\7\25\1\313\36\25\35\0\1\314\24\0\1\314\3\0"+
    "\6\25\1\26\22\25\1\315\42\25\1\26\21\25\1\316"+
    "\43\25\1\26\20\25\1\317\44\25\1\26\14\25\1\320"+
    "\50\25\1\26\27\25\1\321\35\25\1\26\6\25\1\322"+
    "\56\25\1\26\16\25\1\323\46\25\1\26\37\25\1\324"+
    "\25\25\1\26\16\25\1\325\46\25\1\26\16\25\1\326"+
    "\46\25\1\26\25\25\1\327\37\25\1\26\22\25\1\330"+
    "\42\25\1\26\20\25\1\331\44\25\1\332\65\25\1\26"+
    "\23\25\1\333\41\25\1\26\16\25\1\334\46\25\1\26"+
    "\16\25\1\335\46\25\1\26\10\25\1\336\54\25\1\26"+
    "\13\25\1\337\51\25\1\26\10\25\1\340\12\25\1\341"+
    "\41\25\1\26\21\25\1\342\43\25\1\26\22\25\1\343"+
    "\42\25\1\26\12\25\1\344\52\25\1\26\11\25\1\345"+
    "\53\25\1\26\23\25\1\346\41\25\1\26\22\25\1\347"+
    "\42\25\1\26\21\25\1\350\43\25\1\26\22\25\1\351"+
    "\42\25\1\26\16\25\1\352\46\25\1\26\16\25\1\353"+
    "\46\25\1\26\22\25\1\354\42\25\1\26\6\25\1\355"+
    "\56\25\1\26\6\25\1\356\56\25\1\26\37\25\1\357"+
    "\25\25\1\26\6\25\1\360\56\25\1\26\16\25\1\361"+
    "\46\25\1\26\22\25\1\362\42\25\1\26\21\25\1\363"+
    "\43\25\1\26\6\25\1\364\56\25\1\26\37\25\1\365"+
    "\25\25\1\26\22\25\1\366\42\25\1\26\10\25\1\367"+
    "\54\25\1\26\20\25\1\370\44\25\1\26\14\25\1\371"+
    "\50\25\1\372\65\25\1\26\32\25\1\373\32\25\1\26"+
    "\10\25\1\374\54\25\1\26\13\25\1\375\51\25\1\26"+
    "\21\25\1\376\43\25\1\26\12\25\1\377\52\25\1\u0100"+
    "\65\25\1\26\32\25\1\u0101\32\25\1\26\21\25\1\u0102"+
    "\43\25\1\26\6\25\1\u0103\56\25\1\26\23\25\1\u0104"+
    "\41\25\1\26\16\25\1\u0105\46\25\1\26\12\25\1\u0106"+
    "\52\25\1\26\16\25\1\u0107\46\25\1\26\16\25\1\u0108"+
    "\46\25\1\26\12\25\1\u0109\52\25\1\26\21\25\1\u010a"+
    "\43\25\1\26\12\25\1\u010b\52\25\1\u010c\65\25\1\26"+
    "\10\25\1\u010d\54\25\1\26\22\25\1\u010e\42\25\1\26"+
    "\21\25\1\u010f\43\25\1\26\7\25\1\u0110\55\25\1\26"+
    "\22\25\1\u0111\42\25\1\26\10\25\1\u0112\54\25\1\26"+
    "\21\25\1\u0113\43\25\1\26\27\25\1\u0114\35\25\1\26"+
    "\7\25\1\u0115\55\25\1\26\16\25\1\u0116\46\25\1\26"+
    "\21\25\1\u0117\43\25\1\26\6\25\1\u0118\56\25\1\u0119"+
    "\65\25\1\26\21\25\1\u011a\43\25\1\26\6\25\1\u011b"+
    "\56\25\1\26\27\25\1\u011c\35\25\1\26\12\25\1\u011d"+
    "\52\25\1\u011e\65\25\1\26\22\25\1\u011f\42\25\1\26"+
    "\12\25\1\u0120\52\25\1\u0121\65\25\1\u0122\65\25\1\26"+
    "\10\25\1\u0123\54\25\1\26\12\25\1\u0124\52\25\1\u0125"+
    "\65\25\1\26\21\25\1\u0126\43\25\1\26\21\25\1\u0127"+
    "\43\25\1\26\16\25\1\u0128\46\25\1\u0129\65\25\1\u012a"+
    "\65\25\1\26\27\25\1\u012b\35\25\1\26\22\25\1\u012c"+
    "\42\25\1\26\12\25\1\u012d\52\25\1\26\21\25\1\u012e"+
    "\43\25\1\u012f\65\25\1\u0130\57\25";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14094];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\1\11\1\1\2\11\5\1\1\11"+
    "\2\1\1\11\1\0\1\11\14\0\1\1\1\11\6\0"+
    "\4\11\36\0\1\11\45\0\1\11\22\0\1\1\2\0"+
    "\1\11\4\0\1\11\1\0\2\11\5\0\1\11\1\0"+
    "\2\11\10\0\1\11\6\0\3\11\1\0\1\11\2\1"+
    "\14\0\2\11\1\1\14\0\1\11\15\0\1\11\37\0"+
    "\1\11\5\0\1\11\13\0\1\11\14\0\1\11\4\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\4\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer texto = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  private Symbol symbol(int type, Object value, int row, int col) {
      return new Symbol(type, row+1, col+1, value);
    }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AccionesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF, "");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo invalido: "+yytext());
            }
          // fall through
          case 53: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 54: break;
          case 3:
            { System.out.println(yytext());
         return symbol(sym.COMILLA, yytext());
            }
          // fall through
          case 55: break;
          case 4:
            { System.out.println(yytext());
                                    return symbol(sym.DIAGONAL, yytext());
            }
          // fall through
          case 56: break;
          case 5:
            { System.out.println(yytext());
                                    return symbol(sym.MENOR, yytext());
            }
          // fall through
          case 57: break;
          case 6:
            { System.out.println(yytext());
                                    return symbol(sym.IGUAL, yytext());
            }
          // fall through
          case 58: break;
          case 7:
            { System.out.println(yytext());
                                    return symbol(sym.MAYOR, yytext());
            }
          // fall through
          case 59: break;
          case 8:
            { texto.setLength(0); yybegin(VALOR_CORCHETES);
            }
          // fall through
          case 60: break;
          case 9:
            { texto.append(yytext());
            }
          // fall through
          case 61: break;
          case 10:
            { texto.append('\\');
            }
          // fall through
          case 62: break;
          case 11:
            { yybegin(YYINITIAL); 

                if(texto.toString().equals("TITULO")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.COMP_TITULO, texto.toString());
                }else if(texto.toString().equals("PARRAFO")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.COMP_PARRAFO, texto.toString());
                }else if(texto.toString().equals("VIDEO")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.COMPONENTE_VIDEO, texto.toString());
                }else if(texto.toString().equals("MENU")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.COMPONENTE_MENU, texto.toString());
                }else if(texto.toString().equals("IMAGEN")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.COMPONENTE_IMAGEN, texto.toString());
                }else if(texto.toString().equals("CENTRAR")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.VALOR_ALINEACION, texto.toString());
                }else if(texto.toString().equals("JUSTIFICAR")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.VALOR_ALINEACION, texto.toString());
                }else if(texto.toString().equals("IZQUIERDA")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.VALOR_ALINEACION, texto.toString());
                }else if(texto.toString().equals("DERECHA")){
                    System.out.println(texto.toString()); 
                    return symbol(sym.VALOR_ALINEACION, texto.toString());
                }
                else {
                    System.out.println(texto.toString()); 
                    return symbol(sym.TEXTO, texto.toString());
                }
            }
          // fall through
          case 63: break;
          case 12:
            { System.out.println(yytext());
         return symbol(sym.CADENA, yytext());
            }
          // fall through
          case 64: break;
          case 13:
            { System.out.println(yytext());
                                    return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 65: break;
          case 14:
            { System.out.println(yytext());
                                    return symbol(sym.CERRAR, yytext());
            }
          // fall through
          case 66: break;
          case 15:
            { texto.append('\"');
            }
          // fall through
          case 67: break;
          case 16:
            { texto.append('\n');
            }
          // fall through
          case 68: break;
          case 17:
            { texto.append('\r');
            }
          // fall through
          case 69: break;
          case 18:
            { texto.append('\t');
            }
          // fall through
          case 70: break;
          case 19:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_ID, yytext());
            }
          // fall through
          case 71: break;
          case 20:
            { System.out.println(yytext());
    return symbol(sym.VALOR, yytext());
            }
          // fall through
          case 72: break;
          case 21:
            { System.out.println(yytext());
    return symbol(sym.ACCION, yytext());
            }
          // fall through
          case 73: break;
          case 22:
            { System.out.println(yytext());
    return symbol(sym.NOMBRE, yytext());
            }
          // fall through
          case 74: break;
          case 23:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ANCHO, yytext());
            }
          // fall through
          case 75: break;
          case 24:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_CLASE, yytext());
            }
          // fall through
          case 76: break;
          case 25:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_COLOR, yytext());
            }
          // fall through
          case 77: break;
          case 26:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PADRE, yytext());
            }
          // fall through
          case 78: break;
          case 27:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_SITIO, yytext());
            }
          // fall through
          case 79: break;
          case 28:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_TEXTO, yytext());
            }
          // fall through
          case 80: break;
          case 29:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALTURA, yytext());
            }
          // fall through
          case 81: break;
          case 30:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ORIGEN, yytext());
            }
          // fall through
          case 82: break;
          case 31:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_PAGINA, yytext());
            }
          // fall through
          case 83: break;
          case 32:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_TITULO, yytext());
            }
          // fall through
          case 84: break;
          case 33:
            { System.out.println(yytext());
    return symbol(sym.ACCIONES, yytext());
            }
          // fall through
          case 85: break;
          case 34:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTO, yytext());
            }
          // fall through
          case 86: break;
          case 35:
            { System.out.println(yytext());
    return symbol(sym.ETIQUETA, yytext());
            }
          // fall through
          case 87: break;
          case 36:
            { System.out.println(yytext());
    return symbol(sym.ATRIBUTOS, yytext());
            }
          // fall through
          case 88: break;
          case 37:
            { System.out.println(yytext());

    return symbol(sym.ETIQUETAS, yytext());
            }
          // fall through
          case 89: break;
          case 38:
            { System.out.println(yytext());
    return symbol(sym.PARAMETRO, yytext());
            }
          // fall through
          case 90: break;
          case 39:
            { System.out.println(yytext());
    return symbol(sym.PARAMETROS, yytext());
            }
          // fall through
          case 91: break;
          case 40:
            { System.out.println(yytext());
                                    return symbol(sym.ATRIBUTO_ALINEACION, yytext());
            }
          // fall through
          case 92: break;
          case 41:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVA_PAGINA, yytext());
            }
          // fall through
          case 93: break;
          case 42:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_PAGINA, yytext());
            }
          // fall through
          case 94: break;
          case 43:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_CREACION, yytext());
            }
          // fall through
          case 95: break;
          case 44:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_NUEVO_SITIO, yytext());
            }
          // fall through
          case 96: break;
          case 45:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_SITIO_WEB, yytext());
            }
          // fall through
          case 97: break;
          case 46:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_PAGINA, yytext());
            }
          // fall through
          case 98: break;
          case 47:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_CREACION, yytext());
            }
          // fall through
          case 99: break;
          case 48:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_BORRAR_COMPONENTE, yytext());
            }
          // fall through
          case 100: break;
          case 49:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 101: break;
          case 50:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 102: break;
          case 51:
            { System.out.println(yytext());
                                    return symbol(sym.ACCION_MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 103: break;
          case 52:
            { System.out.println(yytext());
                                    return symbol(sym.PARAMETRO_USUARIO_MODIFICACION, yytext());
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
