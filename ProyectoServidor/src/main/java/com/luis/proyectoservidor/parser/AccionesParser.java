
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 22 02:33:41 CST 2024
//----------------------------------------------------

package com.luis.proyectoservidor.parser;

import com.luis.proyectoservidor.lexer.AccionesLexer;
import com.luis.proyectoservidor.objetos.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 22 02:33:41 CST 2024
  */
public class AccionesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AccionesParser() {super();}

  /** Constructor which sets the default scanner. */
  public AccionesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AccionesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\003\012\000\002\003\013\000\002\037\013" +
    "\000\002\037\013\000\002\037\014\000\002\037\013\000" +
    "\002\037\014\000\002\037\010\000\002\037\010\000\002" +
    "\037\013\000\002\004\003\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\005\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\022\014\000" +
    "\002\006\012\000\002\007\026\000\002\010\011\000\002" +
    "\010\002\000\002\011\013\000\002\011\014\000\002\023" +
    "\014\000\002\020\003\000\002\016\014\000\002\021\014" +
    "\000\002\017\014\000\002\005\014\000\002\015\014\000" +
    "\002\012\014\000\002\013\014\000\002\014\014\000\002" +
    "\031\005\000\002\025\005\000\002\032\014\000\002\033" +
    "\014\000\002\035\011\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\040\020\000\002\041\040\000\002\042\020\000\002" +
    "\043\040\000\002\044\020\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\006\000\002\045\006\000" +
    "\002\045\006\000\002\045\006\000\002\045\006\000\002" +
    "\045\006\000\002\045\006\000\002\045\006\000\002\045" +
    "\006\000\002\045\006\000\002\045\006\000\002\045\006" +
    "\000\002\045\006\000\002\045\006\000\002\045\006\000" +
    "\002\045\006\000\002\045\006\000\002\045\006\000\002" +
    "\045\006\000\002\045\006\000\002\045\006\000\002\045" +
    "\006\000\002\045\006\000\002\045\006\000\002\052\020" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\046\014\000\002\050\014\000\002\051\014\000\002\047" +
    "\014\000\002\054\020\000\002\055\026\000\002\057\003" +
    "\000\002\057\003\000\002\024\026\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0284\000\004\016\005\001\002\000\004\002\u0286\001" +
    "\002\000\006\004\007\005\006\001\002\000\004\010\u0280" +
    "\001\002\000\004\017\010\001\002\000\004\016\011\001" +
    "\002\000\004\005\016\001\002\000\004\022\013\001\002" +
    "\000\004\004\014\001\002\000\004\017\015\001\002\000" +
    "\004\002\000\001\002\000\004\010\017\001\002\000\004" +
    "\020\020\001\002\000\022\023\022\026\021\032\026\033" +
    "\030\037\027\040\024\041\023\044\031\001\002\000\004" +
    "\017\u0278\001\002\000\004\017\u0257\001\002\000\004\017" +
    "\364\001\002\000\004\017\327\001\002\000\004\022\323" +
    "\001\002\000\004\017\301\001\002\000\004\017\257\001" +
    "\002\000\004\017\066\001\002\000\004\017\032\001\002" +
    "\000\004\016\033\001\002\000\004\006\034\001\002\000" +
    "\004\017\035\001\002\000\004\016\036\001\002\000\004" +
    "\007\043\001\002\000\004\022\040\001\002\000\004\006" +
    "\041\001\002\000\004\017\042\001\002\000\004\022\ufff5" +
    "\001\002\000\004\010\044\001\002\000\004\020\045\001" +
    "\002\000\004\024\046\001\002\000\004\017\047\001\002" +
    "\000\004\064\050\001\002\000\004\022\051\001\002\000" +
    "\004\007\052\001\002\000\004\017\053\001\002\000\004" +
    "\016\054\001\002\000\004\007\055\001\002\000\004\010" +
    "\056\001\002\000\004\020\057\001\002\000\004\042\060" +
    "\001\002\000\004\017\061\001\002\000\004\064\062\001" +
    "\002\000\004\022\063\001\002\000\004\007\064\001\002" +
    "\000\004\017\065\001\002\000\004\022\uff9f\001\002\000" +
    "\004\016\067\001\002\000\004\006\070\001\002\000\004" +
    "\017\071\001\002\000\004\016\075\001\002\000\004\016" +
    "\135\001\002\000\004\022\107\001\002\000\004\016\uffe4" +
    "\001\002\000\004\007\076\001\002\000\004\010\077\001" +
    "\002\000\004\020\100\001\002\000\004\024\101\001\002" +
    "\000\004\017\102\001\002\000\004\064\103\001\002\000" +
    "\004\022\104\001\002\000\004\007\105\001\002\000\004" +
    "\017\106\001\002\000\006\016\uffe0\022\uffe0\001\002\000" +
    "\004\006\110\001\002\000\004\017\111\001\002\000\006" +
    "\016\112\022\uffe8\001\002\000\004\012\114\001\002\000" +
    "\004\022\ufffa\001\002\000\004\017\115\001\002\000\004" +
    "\016\117\001\002\000\004\022\131\001\002\000\004\013" +
    "\120\001\002\000\004\011\121\001\002\000\004\020\122" +
    "\001\002\000\004\071\123\001\002\000\004\064\124\001" +
    "\002\000\004\071\125\001\002\000\004\021\126\001\002" +
    "\000\004\017\127\001\002\000\006\016\117\022\uffe7\001" +
    "\002\000\004\022\uffe6\001\002\000\004\012\132\001\002" +
    "\000\004\017\133\001\002\000\004\022\uffe9\001\002\000" +
    "\004\016\156\001\002\000\004\007\136\001\002\000\004" +
    "\010\137\001\002\000\004\020\140\001\002\000\004\034" +
    "\141\001\002\000\004\017\142\001\002\000\016\050\144" +
    "\063\143\064\147\066\146\067\151\073\145\001\002\000" +
    "\004\022\uff9d\001\002\000\004\022\uff9a\001\002\000\004" +
    "\022\uff9c\001\002\000\004\022\uff9b\001\002\000\004\022" +
    "\uff9e\001\002\000\004\022\152\001\002\000\004\022\uff99" +
    "\001\002\000\004\007\153\001\002\000\004\017\154\001" +
    "\002\000\004\016\uffe3\001\002\000\004\016\170\001\002" +
    "\000\004\007\157\001\002\000\004\010\160\001\002\000" +
    "\004\020\161\001\002\000\004\035\162\001\002\000\004" +
    "\017\163\001\002\000\004\064\164\001\002\000\004\022" +
    "\165\001\002\000\004\007\166\001\002\000\004\017\167" +
    "\001\002\000\004\016\uffe2\001\002\000\004\007\246\001" +
    "\002\000\004\016\173\001\002\000\004\016\206\001\002" +
    "\000\004\007\174\001\002\000\004\010\175\001\002\000" +
    "\004\020\176\001\002\000\004\025\177\001\002\000\004" +
    "\017\200\001\002\000\004\064\201\001\002\000\004\022" +
    "\202\001\002\000\004\007\203\001\002\000\004\017\204" +
    "\001\002\000\004\016\uffdf\001\002\000\004\016\220\001" +
    "\002\000\004\007\207\001\002\000\004\010\210\001\002" +
    "\000\004\020\211\001\002\000\004\027\212\001\002\000" +
    "\004\017\213\001\002\000\004\065\214\001\002\000\004" +
    "\022\215\001\002\000\004\007\216\001\002\000\004\017" +
    "\217\001\002\000\006\016\uffde\022\uffde\001\002\000\004" +
    "\007\235\001\002\000\004\016\223\001\002\000\004\022" +
    "\uffeb\001\002\000\004\007\224\001\002\000\004\010\225" +
    "\001\002\000\004\020\226\001\002\000\004\031\227\001" +
    "\002\000\004\017\230\001\002\000\004\064\231\001\002" +
    "\000\004\022\232\001\002\000\004\007\233\001\002\000" +
    "\004\017\234\001\002\000\004\022\uffdc\001\002\000\004" +
    "\010\236\001\002\000\004\020\237\001\002\000\004\030" +
    "\240\001\002\000\004\017\241\001\002\000\004\065\242" +
    "\001\002\000\004\022\243\001\002\000\004\007\244\001" +
    "\002\000\004\017\245\001\002\000\006\016\uffdd\022\uffdd" +
    "\001\002\000\004\010\247\001\002\000\004\020\250\001" +
    "\002\000\004\036\251\001\002\000\004\017\252\001\002" +
    "\000\004\064\253\001\002\000\004\022\254\001\002\000" +
    "\004\007\255\001\002\000\004\017\256\001\002\000\004" +
    "\016\uffe1\001\002\000\004\016\260\001\002\000\004\006" +
    "\261\001\002\000\004\017\262\001\002\000\004\016\264" +
    "\001\002\000\004\022\276\001\002\000\004\007\265\001" +
    "\002\000\004\010\266\001\002\000\004\020\267\001\002" +
    "\000\004\024\270\001\002\000\004\017\271\001\002\000" +
    "\004\064\272\001\002\000\004\022\273\001\002\000\004" +
    "\007\274\001\002\000\004\017\275\001\002\000\004\022" +
    "\uffe5\001\002\000\004\006\277\001\002\000\004\017\300" +
    "\001\002\000\004\022\ufff9\001\002\000\004\016\302\001" +
    "\002\000\004\006\303\001\002\000\004\017\304\001\002" +
    "\000\004\016\306\001\002\000\004\022\320\001\002\000" +
    "\004\007\307\001\002\000\004\010\310\001\002\000\004" +
    "\020\311\001\002\000\004\024\312\001\002\000\004\017" +
    "\313\001\002\000\004\064\314\001\002\000\004\022\315" +
    "\001\002\000\004\007\316\001\002\000\004\017\317\001" +
    "\002\000\004\022\uffec\001\002\000\004\006\321\001\002" +
    "\000\004\017\322\001\002\000\004\022\ufffb\001\002\000" +
    "\004\005\324\001\002\000\004\017\325\001\002\000\006" +
    "\016\011\022\ufffe\001\002\000\004\022\ufffd\001\002\000" +
    "\004\016\330\001\002\000\004\006\331\001\002\000\004" +
    "\017\332\001\002\000\004\016\334\001\002\000\004\022" +
    "\360\001\002\000\004\007\335\001\002\000\004\010\336" +
    "\001\002\000\004\020\337\001\002\000\004\024\340\001" +
    "\002\000\004\017\341\001\002\000\004\064\342\001\002" +
    "\000\004\022\343\001\002\000\004\007\344\001\002\000" +
    "\004\017\345\001\002\000\004\016\346\001\002\000\004" +
    "\007\347\001\002\000\004\010\350\001\002\000\004\020" +
    "\351\001\002\000\004\034\352\001\002\000\004\017\353" +
    "\001\002\000\016\050\144\063\143\064\147\066\146\067" +
    "\151\073\145\001\002\000\004\022\355\001\002\000\004" +
    "\007\356\001\002\000\004\017\357\001\002\000\004\022" +
    "\uffea\001\002\000\004\006\361\001\002\000\004\017\362" +
    "\001\002\000\006\016\112\022\uffe8\001\002\000\004\022" +
    "\ufff8\001\002\000\004\016\365\001\002\000\004\006\366" +
    "\001\002\000\004\017\367\001\002\000\004\016\372\001" +
    "\002\000\004\016\u0105\001\002\000\004\022\ufff7\001\002" +
    "\000\004\007\373\001\002\000\004\010\374\001\002\000" +
    "\004\020\375\001\002\000\004\024\376\001\002\000\004" +
    "\017\377\001\002\000\004\064\u0100\001\002\000\004\022" +
    "\u0101\001\002\000\004\007\u0102\001\002\000\004\017\u0103" +
    "\001\002\000\004\016\uffd9\001\002\000\004\016\u010f\001" +
    "\002\000\004\007\u0106\001\002\000\004\010\u0107\001\002" +
    "\000\004\020\u0108\001\002\000\004\042\u0109\001\002\000" +
    "\004\017\u010a\001\002\000\004\064\u010b\001\002\000\004" +
    "\022\u010c\001\002\000\004\007\u010d\001\002\000\004\017" +
    "\u010e\001\002\000\004\016\uffd8\001\002\000\004\007\u0111" +
    "\001\002\000\004\022\uffda\001\002\000\004\010\u0112\001" +
    "\002\000\004\020\u0113\001\002\000\004\043\u0114\001\002" +
    "\000\004\017\u0115\001\002\000\014\045\u0119\052\u011e\053" +
    "\u011f\057\u0118\060\u011a\001\002\000\004\022\uffd3\001\002" +
    "\000\004\022\uffd2\001\002\000\004\022\u023b\001\002\000" +
    "\004\022\u0210\001\002\000\004\022\u01ed\001\002\000\004" +
    "\022\uffd6\001\002\000\004\022\uffd4\001\002\000\004\022" +
    "\uffd7\001\002\000\004\022\u01c2\001\002\000\004\022\u0121" +
    "\001\002\000\004\022\uffd5\001\002\000\004\007\u0122\001" +
    "\002\000\004\017\u0123\001\002\000\004\022\u0124\001\002" +
    "\000\004\006\u0125\001\002\000\004\017\u0126\001\002\000" +
    "\004\016\u0127\001\002\000\004\014\u0128\001\002\000\004" +
    "\017\u0129\001\002\000\004\016\u012d\001\002\000\004\016" +
    "\u01b1\001\002\000\004\016\u019b\001\002\000\004\016\u017c" +
    "\001\002\000\004\015\u0170\001\002\000\004\016\u0136\001" +
    "\002\000\004\022\u0130\001\002\000\004\014\u0131\001\002" +
    "\000\004\017\u0132\001\002\000\004\022\uffcd\001\002\000" +
    "\004\016\u016a\001\002\000\004\016\u015e\001\002\000\004" +
    "\016\u014e\001\002\000\004\015\u0137\001\002\000\004\010" +
    "\u0138\001\002\000\004\020\u0139\001\002\000\010\047\u013a" +
    "\054\u013c\056\u013b\001\002\000\004\017\u0147\001\002\000" +
    "\004\017\u0142\001\002\000\004\017\u013d\001\002\000\004" +
    "\063\u013e\001\002\000\004\022\u013f\001\002\000\004\015" +
    "\u0140\001\002\000\004\017\u0141\001\002\000\006\016\uffa7" +
    "\022\uffa7\001\002\000\004\073\u0143\001\002\000\004\022" +
    "\u0144\001\002\000\004\015\u0145\001\002\000\004\017\u0146" +
    "\001\002\000\006\016\uffa5\022\uffa5\001\002\000\004\050" +
    "\u0148\001\002\000\004\022\u0149\001\002\000\004\015\u014a" +
    "\001\002\000\004\017\u014b\001\002\000\006\016\uffa4\022" +
    "\uffa4\001\002\000\004\016\u0158\001\002\000\006\016\u0153" +
    "\022\uffc7\001\002\000\004\015\u014f\001\002\000\004\010" +
    "\u0150\001\002\000\004\020\u0151\001\002\000\006\047\u013a" +
    "\054\u013c\001\002\000\004\022\uffc1\001\002\000\004\015" +
    "\u0154\001\002\000\004\010\u0155\001\002\000\004\020\u0156" +
    "\001\002\000\004\047\u013a\001\002\000\004\022\uffaf\001" +
    "\002\000\004\015\u0159\001\002\000\004\010\u015a\001\002" +
    "\000\004\020\u015b\001\002\000\004\054\u013c\001\002\000" +
    "\004\016\u0164\001\002\000\006\016\u0153\022\uffc8\001\002" +
    "\000\004\015\u015f\001\002\000\004\010\u0160\001\002\000" +
    "\004\020\u0161\001\002\000\006\047\u013a\056\u013b\001\002" +
    "\000\004\022\uffc2\001\002\000\004\022\uffb0\001\002\000" +
    "\004\015\u0165\001\002\000\004\010\u0166\001\002\000\004" +
    "\020\u0167\001\002\000\004\056\u013b\001\002\000\004\016" +
    "\u0164\001\002\000\004\016\u0158\001\002\000\004\015\u016b" +
    "\001\002\000\004\010\u016c\001\002\000\004\020\u016d\001" +
    "\002\000\006\054\u013c\056\u013b\001\002\000\004\022\uffb5" +
    "\001\002\000\004\022\uffb6\001\002\000\004\010\u0171\001" +
    "\002\000\004\020\u0172\001\002\000\012\047\u013a\054\u013c" +
    "\055\u0173\056\u013b\001\002\000\004\017\u0174\001\002\000" +
    "\004\073\u0175\001\002\000\004\022\u0176\001\002\000\004" +
    "\015\u0177\001\002\000\004\017\u0178\001\002\000\006\016" +
    "\uffa6\022\uffa6\001\002\000\004\016\u0192\001\002\000\004" +
    "\016\u0186\001\002\000\004\016\u014e\001\002\000\004\015" +
    "\u017d\001\002\000\004\010\u017e\001\002\000\004\020\u017f" +
    "\001\002\000\010\047\u013a\054\u013c\055\u0173\001\002\000" +
    "\006\016\u0153\022\uffca\001\002\000\004\016\u0158\001\002" +
    "\000\004\022\uffb2\001\002\000\004\022\uffc4\001\002\000" +
    "\004\016\u018b\001\002\000\006\016\u0153\022\uffc9\001\002" +
    "\000\004\015\u0187\001\002\000\004\010\u0188\001\002\000" +
    "\004\020\u0189\001\002\000\006\047\u013a\055\u0173\001\002" +
    "\000\004\022\uffc3\001\002\000\004\015\u018d\001\002\000" +
    "\004\022\uffb1\001\002\000\004\010\u018e\001\002\000\004" +
    "\020\u018f\001\002\000\004\055\u0173\001\002\000\004\016" +
    "\u018b\001\002\000\004\016\u0158\001\002\000\004\015\u0193" +
    "\001\002\000\004\010\u0194\001\002\000\004\020\u0195\001" +
    "\002\000\006\054\u013c\055\u0173\001\002\000\004\022\uffb8" +
    "\001\002\000\004\022\uffb7\001\002\000\004\016\u01a8\001" +
    "\002\000\004\016\u0192\001\002\000\004\016\u016a\001\002" +
    "\000\004\015\u019c\001\002\000\004\010\u019d\001\002\000" +
    "\004\020\u019e\001\002\000\010\054\u013c\055\u0173\056\u013b" +
    "\001\002\000\004\016\u0164\001\002\000\004\016\u0158\001" +
    "\002\000\004\022\uffbb\001\002\000\004\022\uffbc\001\002" +
    "\000\004\016\u018b\001\002\000\004\016\u0158\001\002\000" +
    "\004\022\uffbe\001\002\000\004\022\uffbd\001\002\000\004" +
    "\016\u018b\001\002\000\004\015\u01ab\001\002\000\004\016" +
    "\u0164\001\002\000\004\022\uffc0\001\002\000\004\010\u01ac" +
    "\001\002\000\004\020\u01ad\001\002\000\006\055\u0173\056" +
    "\u013b\001\002\000\004\022\uffbf\001\002\000\004\016\u01a8" +
    "\001\002\000\004\016\u0186\001\002\000\004\015\u01b7\001" +
    "\002\000\004\016\u015e\001\002\000\004\016\u0164\001\002" +
    "\000\006\016\u0153\022\uffcc\001\002\000\004\022\uffc6\001" +
    "\002\000\004\022\uffb4\001\002\000\004\010\u01b8\001\002" +
    "\000\004\020\u01b9\001\002\000\010\047\u013a\055\u0173\056" +
    "\u013b\001\002\000\004\016\u018b\001\002\000\006\016\u0153" +
    "\022\uffcb\001\002\000\004\022\uffc5\001\002\000\004\022" +
    "\uffb3\001\002\000\004\016\u018b\001\002\000\004\016\u0164" +
    "\001\002\000\004\022\uffba\001\002\000\004\022\uffb9\001" +
    "\002\000\004\007\u01c3\001\002\000\004\017\u01c4\001\002" +
    "\000\004\022\u01c5\001\002\000\004\006\u01c6\001\002\000" +
    "\004\017\u01c7\001\002\000\004\016\u01c8\001\002\000\004" +
    "\014\u01c9\001\002\000\004\017\u01ca\001\002\000\004\016" +
    "\u01cc\001\002\000\004\022\u01ea\001\002\000\004\015\u01cd" +
    "\001\002\000\004\010\u01ce\001\002\000\004\020\u01cf\001" +
    "\002\000\004\046\u01d0\001\002\000\004\017\u01d1\001\002" +
    "\000\016\050\144\063\143\064\147\066\146\067\151\073" +
    "\145\001\002\000\004\022\u01d3\001\002\000\004\015\u01d4" +
    "\001\002\000\004\017\u01d5\001\002\000\004\016\u01d6\001" +
    "\002\000\004\015\u01d7\001\002\000\004\010\u01d8\001\002" +
    "\000\004\020\u01d9\001\002\000\004\047\u01da\001\002\000" +
    "\004\017\u01db\001\002\000\004\050\u01dc\001\002\000\004" +
    "\022\u01dd\001\002\000\004\015\u01de\001\002\000\004\017" +
    "\u01df\001\002\000\004\016\u01e0\001\002\000\004\015\u01e1" +
    "\001\002\000\004\010\u01e2\001\002\000\004\020\u01e3\001" +
    "\002\000\004\051\u01e4\001\002\000\004\017\u01e5\001\002" +
    "\000\004\066\u01e6\001\002\000\004\022\u01e7\001\002\000" +
    "\004\015\u01e8\001\002\000\004\017\u01e9\001\002\000\004" +
    "\022\uffce\001\002\000\004\014\u01eb\001\002\000\004\017" +
    "\u01ec\001\002\000\004\022\uffcf\001\002\000\004\007\u01ee" +
    "\001\002\000\004\017\u01ef\001\002\000\004\022\u01f0\001" +
    "\002\000\004\006\u01f1\001\002\000\004\017\u01f2\001\002" +
    "\000\004\016\u01f3\001\002\000\004\014\u01f4\001\002\000" +
    "\004\017\u01f5\001\002\000\004\016\u01f7\001\002\000\004" +
    "\022\u020d\001\002\000\004\015\u01f8\001\002\000\004\010" +
    "\u01f9\001\002\000\004\020\u01fa\001\002\000\004\036\u01fb" +
    "\001\002\000\004\017\u01fc\001\002\000\004\064\u01fd\001" +
    "\002\000\004\022\u01fe\001\002\000\004\015\u01ff\001\002" +
    "\000\004\017\u0200\001\002\000\004\016\u0201\001\002\000" +
    "\004\015\u0202\001\002\000\004\010\u0203\001\002\000\004" +
    "\020\u0204\001\002\000\004\070\u0205\001\002\000\004\017" +
    "\u0206\001\002\000\006\063\u0207\064\u0209\001\002\000\004" +
    "\022\uffa1\001\002\000\004\022\u020a\001\002\000\004\022" +
    "\uffa0\001\002\000\004\015\u020b\001\002\000\004\017\u020c" +
    "\001\002\000\004\022\uffa2\001\002\000\004\014\u020e\001" +
    "\002\000\004\017\u020f\001\002\000\004\022\uffa3\001\002" +
    "\000\004\007\u0211\001\002\000\004\017\u0212\001\002\000" +
    "\004\022\u0213\001\002\000\004\006\u0214\001\002\000\004" +
    "\017\u0215\001\002\000\004\016\u0216\001\002\000\004\014" +
    "\u0217\001\002\000\004\017\u0218\001\002\000\004\016\u0219" +
    "\001\002\000\004\015\u021e\001\002\000\004\022\u021b\001" +
    "\002\000\004\014\u021c\001\002\000\004\017\u021d\001\002" +
    "\000\004\022\uffd1\001\002\000\004\010\u021f\001\002\000" +
    "\004\020\u0220\001\002\000\004\046\u0221\001\002\000\004" +
    "\017\u0222\001\002\000\016\050\144\063\143\064\147\066" +
    "\146\067\151\073\145\001\002\000\004\022\u0224\001\002" +
    "\000\004\015\u0225\001\002\000\004\017\u0226\001\002\000" +
    "\004\016\u0227\001\002\000\004\015\u0228\001\002\000\004" +
    "\010\u0229\001\002\000\004\020\u022a\001\002\000\004\047" +
    "\u022b\001\002\000\004\017\u022c\001\002\000\004\050\u022d" +
    "\001\002\000\004\022\u022e\001\002\000\004\015\u022f\001" +
    "\002\000\004\017\u0230\001\002\000\004\016\u0231\001\002" +
    "\000\004\015\u0232\001\002\000\004\010\u0233\001\002\000" +
    "\004\020\u0234\001\002\000\004\051\u0235\001\002\000\004" +
    "\017\u0236\001\002\000\004\066\u0237\001\002\000\004\022" +
    "\u0238\001\002\000\004\015\u0239\001\002\000\004\017\u023a" +
    "\001\002\000\004\022\uffd0\001\002\000\004\007\u023c\001" +
    "\002\000\004\017\u023d\001\002\000\004\022\u023e\001\002" +
    "\000\004\006\u023f\001\002\000\004\017\u0240\001\002\000" +
    "\004\016\u0241\001\002\000\004\014\u0242\001\002\000\004" +
    "\017\u0243\001\002\000\004\016\u019b\001\002\000\004\016" +
    "\u01a8\001\002\000\004\016\u0192\001\002\000\004\022\u024c" +
    "\001\002\000\004\016\u016a\001\002\000\004\016\u0164\001" +
    "\002\000\004\016\u0158\001\002\000\004\022\uffa9\001\002" +
    "\000\004\022\uffa8\001\002\000\004\014\u024d\001\002\000" +
    "\004\017\u024e\001\002\000\004\022\uffae\001\002\000\004" +
    "\016\u018b\001\002\000\004\016\u0158\001\002\000\004\022" +
    "\uffab\001\002\000\004\022\uffaa\001\002\000\004\016\u018b" +
    "\001\002\000\004\016\u0164\001\002\000\004\022\uffad\001" +
    "\002\000\004\022\uffac\001\002\000\004\016\u0258\001\002" +
    "\000\004\006\u0259\001\002\000\004\017\u025a\001\002\000" +
    "\004\016\075\001\002\000\006\016\u0262\022\ufff4\001\002" +
    "\000\004\022\u025d\001\002\000\004\006\u025e\001\002\000" +
    "\004\017\u025f\001\002\000\004\022\ufffc\001\002\000\004" +
    "\016\u026b\001\002\000\004\016\220\001\002\000\004\007" +
    "\u0265\001\002\000\004\016\223\001\002\000\004\022\uffed" +
    "\001\002\000\004\010\u0266\001\002\000\004\020\u0267\001" +
    "\002\000\010\025\177\027\212\030\240\001\002\000\004" +
    "\016\223\001\002\000\004\022\ufff2\001\002\000\006\016" +
    "\u0272\022\ufff0\001\002\000\004\007\u026e\001\002\000\004" +
    "\016\223\001\002\000\004\022\ufff1\001\002\000\004\010" +
    "\u026f\001\002\000\004\020\u0270\001\002\000\006\027\212" +
    "\030\240\001\002\000\004\022\uffef\001\002\000\004\007" +
    "\u0275\001\002\000\006\016\223\022\uffee\001\002\000\004" +
    "\022\ufff3\001\002\000\004\010\u0276\001\002\000\004\020" +
    "\u0277\001\002\000\006\030\240\031\227\001\002\000\004" +
    "\016\u0279\001\002\000\004\006\u027a\001\002\000\004\017" +
    "\u027b\001\002\000\004\016\372\001\002\000\004\016\u0105" +
    "\001\002\000\004\022\ufff6\001\002\000\004\016\u010f\001" +
    "\002\000\004\022\uffdb\001\002\000\004\020\u0281\001\002" +
    "\000\022\023\022\026\021\032\026\033\030\037\027\040" +
    "\024\041\023\044\031\001\002\000\004\022\u0283\001\002" +
    "\000\004\005\u0284\001\002\000\004\017\u0285\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0284\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\073\006\072\020\071" +
    "\001\001\000\004\016\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\171\001" +
    "\001\000\004\012\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\370\032\367\001\001\000\004\033\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\036" +
    "\u011c\040\u011a\042\u011f\044\u011b\052\u0115\054\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\045\u012e\046\u0129\047\u012a\050\u012d\051\u012b\001\001\000" +
    "\010\047\u01ae\050\u01b1\051\u01af\001\001\000\010\046\u0197" +
    "\050\u0199\051\u0198\001\001\000\010\046\u0179\047\u0178\050" +
    "\u017a\001\001\000\002\001\001\000\010\046\u0133\047\u0132" +
    "\051\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\u0167\051\u0168" +
    "\001\001\000\006\047\u015b\051\u015c\001\001\000\006\046" +
    "\u014c\047\u014b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0156\001\001\000\004\047\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0162\001\001\000\004" +
    "\047\u0161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u016e\001\001\000\004" +
    "\046\u016d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\u018f\050\u0190\001\001\000\006\047\u0183\050\u0184" +
    "\001\001\000\006\046\u017f\047\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u0182\001\001\000\004\046\u0181\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u018b\001\001" +
    "\000\004\047\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0196\001\001" +
    "\000\004\046\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\u01a8\051\u01a6\001\001\000" +
    "\006\046\u01a2\050\u01a3\001\001\000\006\046\u019e\051\u019f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u01a1\001\001\000\004" +
    "\046\u01a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u01a5\001\001\000\004\046\u01a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u01ad\001\001\000" +
    "\002\001\001\000\004\051\u01a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\u01be\051\u01bd\001\001\000\006" +
    "\047\u01b9\050\u01ba\001\001\000\002\001\001\000\006\047" +
    "\u01b2\051\u01b3\001\001\000\004\051\u01b5\001\001\000\004" +
    "\047\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u01bc\001\001\000\004\047\u01bb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u01c0\001\001\000\004" +
    "\051\u01bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u01ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u01d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u01f5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u0207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u0219\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u0222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\046\u0243\050\u0246" +
    "\051\u0244\053\u0245\001\001\000\006\050\u0253\051\u0252\001" +
    "\001\000\006\046\u024e\050\u024f\001\001\000\002\001\001" +
    "\000\006\046\u0247\051\u0248\001\001\000\004\051\u024a\001" +
    "\001\000\004\046\u0249\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0251\001\001\000\004\046\u0250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0255\001" +
    "\001\000\004\051\u0254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u025b\005\u025a\001\001\000\010\012\u0260" +
    "\013\u0262\015\u025f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0269" +
    "\013\u026b\001\001\000\004\013\u0267\001\001\000\002\001" +
    "\001\000\004\014\u0263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0268\001\001\000\002\001\001\000\006\013\u0272\014\u0270" +
    "\001\001\000\002\001\001\000\004\014\u026c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\u027c\032\u027b\001\001" +
    "\000\004\033\u027d\001\001\000\002\001\001\000\004\035" +
    "\u027e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0281\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AccionesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AccionesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AccionesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Connect this parser to a scanner!
   
    public AccionesParser(AccionesLexer lex) {
	    super(lex);
	  }
    private Symbol s;

    public ArrayList<ErrorSintactico> errores = new ArrayList<>();


    public void syntax_error(Symbol c) {
            this.s = c;
            String cadena = c.value.toString();
                        int linea = c.left;
                        int col = c.right;
                        System.out.print("Error aca, value: " + cadena);
                        System.out.print(" -Linea " + linea);
                        System.out.println(" Columna " + col);
                             errores.add(new ErrorSintactico(cadena, linea, col, "Error sintáctico"));
                        if (expected_token_ids().isEmpty()) {
                            System.out.println("ya no se esperaba ningun simbolo");
                        }
    }
    
    public Symbol getSim(){
        return this.s;
    }

    public List<String> mensajes  = new ArrayList<>();

    public List<Sitio> sitios  = new ArrayList<>();
    public List<Pagina> paginas = new ArrayList<>();
    public List<Componente> componentes = new ArrayList<>();
    public List<Componente> componentesModificacion = new ArrayList<>();
    public List<Accion> acciones = new ArrayList<>();
    List<Etiqueta> listEtiquetas = new ArrayList<>();
    Sitio site = new Sitio("", "", "", "", "");
    Img img = new Img();
    Pagina page = new Pagina("", "", "", "", "", "", "", "");
    AccionModificarPagina pageModificar = new AccionModificarPagina("", "", "");


    /*
    public void unrecovered_syntax_error(Symbol c) {
        System.out.println("Error irrecuperable sobrecargado: "+c.value);
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AccionesParser$actions {
  private final AccionesParser parser;

  /** Constructor */
  CUP$AccionesParser$actions(AccionesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AccionesParser$do_action(
    int                        CUP$AccionesParser$act_num,
    java_cup.runtime.lr_parser CUP$AccionesParser$parser,
    java.util.Stack            CUP$AccionesParser$stack,
    int                        CUP$AccionesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AccionesParser$result;

      /* select the action based on the action number */
      switch (CUP$AccionesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valores ::= CADENA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valores ::= VALOR_ALINEACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valores ::= COLOR_HEXAGONAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valores ::= NUMERO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = String.valueOf(i); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valores ::= TEXTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valores ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("valores",26, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // params_delete_component ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_PAGINA MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              AccionDeletComponent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int paginaleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int paginaright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String pagina = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 
                                RESULT = new AccionDeletComponent(id, pagina);
                            
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_delete_component",18, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-19)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op_at_menu ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_at_menu",45, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op_at_menu ::= TEXTO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_at_menu",45, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // atributos_menu ::= MENOR ATRIBUTO NOMBRE IGUAL PARAMETRO_PADRE MAYOR IDENTIFICADOR CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ETIQUETAS MAYOR op_at_menu CERRAR ATRIBUTO MAYOR 
            {
              Menu RESULT =null;
		int idpadreleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int idpadreright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String idpadre = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int etiquetasleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int etiquetasright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String etiquetas = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Menu menu = new Menu();
                        menu.setPadre(idpadre);
                        List<Etiqueta> es = new ArrayList<>();
                        String[] auxi = etiquetas.split("\\|");
                        for(int i = 0; i < auxi.length; i++){
                            es.add(new Etiqueta(auxi[i]));
                        }
                        menu.setEtiquetas(es);

                        RESULT = menu;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_menu",43, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-19)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // crear_menu ::= COMPONENTE_MENU CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_menu CERRAR ATRIBUTOS MAYOR 
            {
              Menu RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int menuleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int menuright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Menu menu = (Menu)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Menu m = menu;
                    m.setClase(clase);
                    RESULT = m;
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_menu",42, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alineacion_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR 
            {
              String RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        RESULT = alineacion;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("alineacion_img",37, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ancho_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ANCHO MAYOR NUMERO CERRAR ATRIBUTO MAYOR 
            {
              Integer RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String ancho = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    RESULT = Integer.parseInt(ancho);
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("ancho_img",39, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // altura_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALTURA MAYOR NUMERO CERRAR ATRIBUTO MAYOR 
            {
              Integer RESULT =null;
		int alturaleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alturaright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String altura = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    RESULT = Integer.parseInt(altura);
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("altura_img",38, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // url_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ORIGEN MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              String RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                RESULT = url;
            
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("url_img",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atributos_video ::= altura_img url_img ancho_img 
            {
              Video RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atributos_video ::= altura_img ancho_img url_img 
            {
              Video RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // atributos_video ::= ancho_img url_img altura_img 
            {
              Video RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // atributos_video ::= ancho_img altura_img url_img 
            {
              Video RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // atributos_video ::= url_img ancho_img altura_img 
            {
              Video RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // atributos_video ::= url_img altura_img ancho_img 
            {
              Video RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // crear_video ::= COMPONENTE_VIDEO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_video CERRAR ATRIBUTOS MAYOR 
            {
              Video RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int videoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int videoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Video video = (Video)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Video v = video;
                    v.setClase(clase);
                    RESULT = v;
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_video",40, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // atributos_img ::= altura_img ancho_img alineacion_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // atributos_img ::= altura_img url_img alineacion_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // atributos_img ::= ancho_img url_img alineacion_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // atributos_img ::= ancho_img altura_img alineacion_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributos_img ::= url_img ancho_img alineacion_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributos_img ::= url_img altura_img alineacion_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributos_img ::= altura_img alineacion_img ancho_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributos_img ::= altura_img alineacion_img url_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributos_img ::= ancho_img alineacion_img url_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributos_img ::= ancho_img alineacion_img altura_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributos_img ::= url_img alineacion_img ancho_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributos_img ::= url_img alineacion_img altura_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atributos_img ::= alineacion_img altura_img ancho_img url_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // atributos_img ::= alineacion_img altura_img url_img ancho_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // atributos_img ::= alineacion_img ancho_img url_img altura_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributos_img ::= alineacion_img ancho_img altura_img url_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributos_img ::= alineacion_img url_img ancho_img altura_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributos_img ::= alineacion_img url_img altura_img ancho_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributos_img ::= altura_img ancho_img url_img alineacion_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributos_img ::= altura_img url_img ancho_img alineacion_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributos_img ::= ancho_img url_img altura_img alineacion_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributos_img ::= ancho_img altura_img url_img alineacion_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributos_img ::= url_img ancho_img altura_img alineacion_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributos_img ::= url_img altura_img ancho_img alineacion_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributos_img ::= altura_img ancho_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributos_img ::= altura_img url_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributos_img ::= ancho_img url_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atributos_img ::= ancho_img altura_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atributos_img ::= url_img ancho_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributos_img ::= url_img altura_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",35, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // crear_img ::= COMPONENTE_IMAGEN CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_img CERRAR ATRIBUTOS MAYOR 
            {
              Img RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int imgleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Img img = (Img)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Img image = img;
                    image.setClase(clase);
                    RESULT = image;

                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_img",34, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributos_parrafo ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_TEXTO MAYOR valores CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_COLOR MAYOR COLOR_HEXAGONAL CERRAR ATRIBUTO MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Parrafo parrafo = new Parrafo();
                        parrafo.setColor(color);
                        parrafo.setTexto(txt);
                        parrafo.setAlineacion(alineacion);
                        RESULT = (Parrafo) parrafo;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_parrafo",33, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-29)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // crear_parrafo ::= COMP_PARRAFO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_parrafo CERRAR ATRIBUTOS MAYOR 
            {
              Parrafo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int parrafoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int parraforight = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Object parrafo = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Parrafo parraf = (Parrafo) parrafo;
                        parraf.setClase(clase);
                        RESULT = (Parrafo) parraf;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_parrafo",32, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributos_titulo ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_TEXTO MAYOR valores CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_COLOR MAYOR COLOR_HEXAGONAL CERRAR ATRIBUTO MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Titulo titulo = new Titulo();
                        titulo.setColor(color);
                        titulo.setTexto(txt);
                        titulo.setAlineacion(alineacion);
                        RESULT = (Titulo) titulo;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_titulo",31, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-29)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // crear_titulo ::= COMP_TITULO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_titulo CERRAR ATRIBUTOS MAYOR 
            {
              Titulo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Titulo t =(Titulo) titulo;
                    t.setClase(clase);
                    RESULT = (Titulo) t;
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_titulo",30, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_clase ::= crear_menu 
            {
              Componente RESULT =null;
		int menuleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int menuright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Menu menu = (Menu)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Menu) menu; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_clase ::= crear_video 
            {
              Componente RESULT =null;
		int videoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int videoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Video video = (Video)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Video) video; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_clase ::= crear_img 
            {
              Componente RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Img img = (Img)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Img) img; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_clase ::= crear_parrafo 
            {
              Componente RESULT =null;
		int parrafoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int parraforight = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Parrafo parrafo = (Parrafo)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  RESULT = (Parrafo) parrafo; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_clase ::= crear_titulo 
            {
              Componente RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Titulo titulo = (Titulo)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Titulo) titulo; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // clase_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_CLASE MAYOR op_clase 
            {
              Componente RESULT =null;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                    if(componente instanceof Parrafo parraf){
                        RESULT = (Parrafo) componente;
                    }else if(componente instanceof Titulo titulo){
                        RESULT = (Titulo) componente; 
                    }else if(componente instanceof Img img){
                        RESULT = (Img) componente;
                    }else if(componente instanceof Video video){
                        RESULT = (Video) componente;
                    }else if(componente instanceof Menu menu){
                        RESULT = (Menu) componente;
                    }
                   
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("clase_comp",27, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // page_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_PAGINA MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = page; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_comp",25, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("id_comp",24, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // params_component ::= id_comp page_comp clase_comp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  
                            boolean existe = false;
                            for (int i = 0; i < parser.componentes.size(); i++) {
                                if(parser.componentes.get(i).getId().equals(componente.getId())){
                                    existe = true;
                                    break;
                                }
                            }
                            if(!existe){
                                if(componente instanceof Titulo titulo){
                                    titulo.setId(id);
                                    titulo.setPagina(page);
                                    parser.componentes.add(titulo);
                                }else if(componente instanceof Parrafo parraf){
                                    parraf.setId(id);
                                    parraf.setPagina(page);
                                    parser.componentes.add(parraf);
                                }else if(componente instanceof Img img){
                                    img.setId(id);
                                    img.setPagina(page);
                                    parser.componentes.add(img);
                                }else if(componente instanceof Video video){
                                    video.setId(id);
                                    video.setPagina(page);
                                    parser.componentes.add(video);
                                }else if(componente instanceof Menu menu){
                                    menu.setId(id);
                                    menu.setPagina(page);
                                    parser.componentes.add(menu);
                                }
                            }else{
                                parser.mensajes.add("Mensaje-servidor:\tEl id del componenete ya esta en uso, id repetido: "+componente.getId());
                            }

                        
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_component",19, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params_component_modificar ::= id_comp page_comp clase_comp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  
                                    if(componente instanceof Titulo titulo){
                                        titulo.setId(id);
                                        titulo.setPagina(page);
                                        parser.componentesModificacion.add(titulo);
                                    }else if(componente instanceof Parrafo parraf){
                                        parraf.setId(id);
                                        parraf.setPagina(page);
                                        parser.componentesModificacion.add(parraf);
                                    }else if(componente instanceof Img img){
                                        img.setId(id);
                                        img.setPagina(page);
                                        parser.componentesModificacion.add(img);
                                    }else if(componente instanceof Video video){
                                        video.setId(id);
                                        video.setPagina(page);
                                        parser.componentesModificacion.add(video);
                                    }else if(componente instanceof Menu menu){
                                        menu.setId(id);
                                        menu.setPagina(page);
                                        parser.componentesModificacion.add(menu);
                                    }
                                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_component_modificar",23, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // userM ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_MODIFICACION MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userM",10, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fechaM ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_MODIFICACION MAYOR FECHA CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = f; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaM",9, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fechaC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_CREACION MAYOR FECHA CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = f; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaC",8, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // userC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_CREACION MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userC",11, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // id_sitio ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("id_sitio",3, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // page_father ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_PADRE MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_father",13, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // page_sitio ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_SITIO MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_sitio",15, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // page_title ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_TITULO MAYOR valores CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_title",12, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // page_id ::= id_sitio 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_id",14, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params_borrar_pagina ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              AccionDeletePage RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = new AccionDeletePage("",id); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_borrar_pagina",17, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_etiquetas ::= MENOR ETIQUETA VALOR IGUAL COMILLA IDENTIFICADOR COMILLA DIAGONAL MAYOR list_etiquetas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;
		
                        parser.listEtiquetas.add(new Etiqueta(id));
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_etiquetas",7, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_etiquetas ::= MENOR ETIQUETA VALOR IGUAL COMILLA IDENTIFICADOR COMILLA DIAGONAL MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        parser.listEtiquetas.add(new Etiqueta(id));
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_etiquetas",7, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas ::= 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("etiquetas",6, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas ::= MENOR ETIQUETAS MAYOR list_etiquetas CERRAR ETIQUETAS MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("etiquetas",6, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params_modificar_pagina ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_TITULO MAYOR valores CERRAR PARAMETRO MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                                parser.pageModificar.setIdPagina(id);
                                parser.pageModificar.setTitulo(titulo);
                            
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_modificar_pagina",5, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-19)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_pagina ::= page_id page_title page_sitio page_father userC fechaC fechaM userM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)).value;
		int sitioleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)).left;
		int sitioright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)).right;
		String sitio = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)).value;
		int padreleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String padre = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;
		int ucleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String fc = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fm = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int umleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int umright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String um = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		
                            parser.page.setId(id);
                            parser.page.setTitulo(titulo);
                            parser.page.setSitio(sitio);
                            parser.page.setPadre(padre);
                            parser.page.setUsuarioCreacion(uc);
                            parser.page.setFechaCreacion(fc);
                            parser.page.setFechaModificacion(fm);
                            parser.page.setUsuarioModificacion(um);
                        
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_pagina",4, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params_borrar_sitio ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR IDENTIFICADOR CERRAR PARAMETRO MAYOR 
            {
              AccionDeleteSitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                            RESULT = new AccionDeleteSitio("", id);
                        
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_borrar_sitio",16, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_sitio ::= id_sitio fechaM userM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int userMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int userMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String userM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setFechaModificacion(fechaM);
                        parser.site.setUserModificacion(userM);  
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros_sitio ::= id_sitio userC fechaC fechaM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int userCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int userCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String userC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int fechaMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int fechaMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String fechaM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setUserCreacion(userC); 
                        parser.site.setFechaCreacion(fechaC); 
                        parser.site.setFechaModificacion(fechaM);
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros_sitio ::= id_sitio userC fechaC userM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int userCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int userCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String userC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int userMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int userMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String userM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setUserCreacion(userC); 
                        parser.site.setFechaCreacion(fechaC); 
                        parser.site.setUserModificacion(userM);  
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_sitio ::= id_sitio userC fechaC 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int userCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int userCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String userC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int fechaCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int fechaCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String fechaC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setUserCreacion(userC); 
                        parser.site.setFechaCreacion(fechaC); 
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_sitio ::= id_sitio userC fechaM userM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int userCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int userCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String userC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int userMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int userMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String userM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setUserCreacion(userC); 
                        parser.site.setFechaModificacion(fechaM);
                        parser.site.setUserModificacion(userM);  
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_sitio ::= id_sitio fechaC fechaM userM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int fechaCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int fechaCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String fechaC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int userMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int userMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String userM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setFechaCreacion(fechaC); 
                        parser.site.setFechaModificacion(fechaM);
                        parser.site.setUserModificacion(userM);  
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_sitio ::= id_sitio userC fechaC fechaM userM 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;
		int userCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int userCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String userC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int fechaCleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int fechaCright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String fechaC = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int fechaMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int fechaMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String fechaM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int userMleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int userMright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String userM = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                        parser.site.setId(id);
                        parser.site.setUserCreacion(userC); 
                        parser.site.setFechaCreacion(fechaC); 
                        parser.site.setFechaModificacion(fechaM);
                        parser.site.setUserModificacion(userM);  
                        RESULT = parser.site; 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_sitio ::= id_sitio 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 parser.site.setId(id); RESULT = parser.site; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nombre_accion ::= ACCION_BORRAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_delete_component CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeletComponent accion = (AccionDeletComponent)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 
                        AccionDeletComponent delete = accion;
                        delete.setTipo(Accion.DELE_COMPONENT);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nombre_accion ::= ACCION_MODIFICAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_component_modificar 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nombre_accion ::= ACCION_AGREGAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_component 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nombre_accion ::= ACCION_MODIFICAR_PAGINA MAYOR MENOR PARAMETROS MAYOR params_modificar_pagina CERRAR PARAMETROS MAYOR etiquetas 
            {
              Object RESULT =null;
		
                        parser.pageModificar.setTipo(Accion.MODIFICAR_PAGINA);
                        List<Etiqueta> es = new ArrayList<>(parser.listEtiquetas);
                        parser.pageModificar.setEtiquetas(es);
                        parser.acciones.add(parser.pageModificar);
                        parser.pageModificar = new AccionModificarPagina("", "", "");
                        parser.listEtiquetas.clear(); 
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_accion ::= ACCION_BORRAR_PAGINA MAYOR MENOR PARAMETROS MAYOR params_borrar_pagina CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeletePage accion = (AccionDeletePage)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        AccionDeletePage delete = accion;
                        delete.setTipo(Accion.DELETE_PAGE);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre_accion ::= ACCION_NUEVA_PAGINA MAYOR MENOR PARAMETROS MAYOR parametros_pagina CERRAR PARAMETROS MAYOR etiquetas 
            {
              Object RESULT =null;
		
                        boolean existe = false;
                        for (int i = 0; i < parser.paginas.size(); i++) {
                            if(parser.paginas.get(i).getId().equals(parser.page.getId())){
                                existe = true;
                                break;
                            }
                        }
                        if(!existe){
                            List<Etiqueta> es = new ArrayList<>(parser.listEtiquetas);
                            parser.page.setEtiquetas(es);
                            parser.paginas.add(parser.page);
                            parser.page = new Pagina("", "", "", "", "", "", "", "");
                            parser.listEtiquetas.clear();
                        }else{
                            parser.mensajes.add("Mensaje-servidor:\tEl id de la pagina web ya esta en uso. ");
                        }

                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre_accion ::= ACCION_BORRAR_SITIO_WEB MAYOR MENOR PARAMETROS MAYOR params_borrar_sitio CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeleteSitio accion = (AccionDeleteSitio)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        AccionDeleteSitio delete = accion;
                        delete.setTipo(Accion.DELETE_SITE);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nombre_accion ::= ACCION_NUEVO_SITIO MAYOR MENOR PARAMETROS MAYOR parametros_sitio CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int sitioleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int sitioright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Sitio sitio = (Sitio)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 
                    boolean existe = false;
                    for (int i = 0; i < parser.sitios.size(); i++) {
                        if(parser.sitios.get(i).getId().equals(sitio.getId())){
                            existe = true;
                            break;
                        }
                    }
                    if(!existe){
                        parser.sitios.add(sitio); 
                        parser.site = new Sitio("", "", "", "", "");
                    }else{
                        parser.mensajes.add("Mensaje-servidor:\tEl id del sitio ya esta en uso. ");
                    }
                   
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR list_acciones 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_acciones",1, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_acciones",1, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("acciones",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // acciones ::= MENOR ACCIONES MAYOR list_acciones CERRAR ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("acciones",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= acciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		RESULT = start_val;
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AccionesParser$parser.done_parsing();
          return CUP$AccionesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

