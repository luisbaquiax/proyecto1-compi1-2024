
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 20 23:10:29 CST 2024
//----------------------------------------------------

package com.luis.proyectoservidor.parser;

import com.luis.proyectoservidor.lexer.AccionesLexer;
import com.luis.proyectoservidor.objetos.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 20 23:10:29 CST 2024
  */
public class AccionesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AccionesParser() {super();}

  /** Constructor which sets the default scanner. */
  public AccionesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AccionesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\004\012\000\002\004\013\000\002\046\013" +
    "\000\002\046\013\000\002\046\013\000\002\046\013\000" +
    "\002\046\003\000\002\046\010\000\002\046\010\000\002" +
    "\046\013\000\002\006\015\000\002\025\015\000\002\025" +
    "\015\000\002\025\015\000\002\025\014\000\002\022\015" +
    "\000\002\022\015\000\002\022\014\000\002\023\015\000" +
    "\002\024\014\000\002\026\014\000\002\027\014\000\002" +
    "\035\005\000\002\031\005\000\002\036\014\000\002\037" +
    "\014\000\002\041\011\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\053\020\000" +
    "\002\054\040\000\002\055\020\000\002\056\040\000\002" +
    "\057\020\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\006\000\002\060\006\000\002\060\006\000" +
    "\002\060\006\000\002\060\006\000\002\060\006\000\002" +
    "\060\006\000\002\060\006\000\002\060\006\000\002\060" +
    "\006\000\002\060\006\000\002\060\006\000\002\060\006" +
    "\000\002\060\006\000\002\060\006\000\002\060\006\000" +
    "\002\060\006\000\002\060\006\000\002\060\006\000\002" +
    "\060\006\000\002\060\006\000\002\060\006\000\002\060" +
    "\006\000\002\060\006\000\002\065\020\000\002\066\005" +
    "\000\002\066\005\000\002\066\005\000\002\066\005\000" +
    "\002\066\005\000\002\066\005\000\002\061\014\000\002" +
    "\063\014\000\002\064\014\000\002\062\014\000\002\030" +
    "\026" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f1\000\004\016\005\001\002\000\004\002\u01f3\001" +
    "\002\000\006\004\007\005\006\001\002\000\004\010\u01ed" +
    "\001\002\000\004\017\010\001\002\000\004\016\011\001" +
    "\002\000\004\005\016\001\002\000\004\022\013\001\002" +
    "\000\004\004\014\001\002\000\004\017\015\001\002\000" +
    "\004\002\000\001\002\000\004\010\017\001\002\000\004" +
    "\020\020\001\002\000\022\023\022\026\021\032\026\033" +
    "\030\037\027\040\024\041\023\044\031\001\002\000\004" +
    "\017\u01e5\001\002\000\004\017\u01a4\001\002\000\004\017" +
    "\146\001\002\000\004\022\ufff8\001\002\000\004\022\142" +
    "\001\002\000\004\017\120\001\002\000\004\017\076\001" +
    "\002\000\004\017\066\001\002\000\004\017\032\001\002" +
    "\000\004\016\033\001\002\000\004\006\034\001\002\000" +
    "\004\017\035\001\002\000\004\016\036\001\002\000\004" +
    "\007\043\001\002\000\004\022\040\001\002\000\004\006" +
    "\041\001\002\000\004\017\042\001\002\000\004\022\ufff5" +
    "\001\002\000\004\010\044\001\002\000\004\020\045\001" +
    "\002\000\004\024\046\001\002\000\004\017\047\001\002" +
    "\000\004\063\050\001\002\000\004\022\051\001\002\000" +
    "\004\007\052\001\002\000\004\017\053\001\002\000\004" +
    "\016\054\001\002\000\004\007\055\001\002\000\004\010" +
    "\056\001\002\000\004\020\057\001\002\000\004\042\060" +
    "\001\002\000\004\017\061\001\002\000\004\063\062\001" +
    "\002\000\004\022\063\001\002\000\004\007\064\001\002" +
    "\000\004\017\065\001\002\000\004\022\uffb1\001\002\000" +
    "\004\016\067\001\002\000\004\006\070\001\002\000\004" +
    "\017\071\001\002\000\002\001\002\000\004\022\073\001" +
    "\002\000\004\006\074\001\002\000\004\017\075\001\002" +
    "\000\004\022\ufffa\001\002\000\004\016\077\001\002\000" +
    "\004\006\100\001\002\000\004\017\101\001\002\000\004" +
    "\016\103\001\002\000\004\022\115\001\002\000\004\007" +
    "\104\001\002\000\004\010\105\001\002\000\004\020\106" +
    "\001\002\000\004\024\107\001\002\000\004\017\110\001" +
    "\002\000\004\063\111\001\002\000\004\022\112\001\002" +
    "\000\004\007\113\001\002\000\004\017\114\001\002\000" +
    "\004\022\uffe9\001\002\000\004\006\116\001\002\000\004" +
    "\017\117\001\002\000\004\022\ufff9\001\002\000\004\016" +
    "\121\001\002\000\004\006\122\001\002\000\004\017\123" +
    "\001\002\000\004\016\125\001\002\000\004\022\137\001" +
    "\002\000\004\007\126\001\002\000\004\010\127\001\002" +
    "\000\004\020\130\001\002\000\004\024\131\001\002\000" +
    "\004\017\132\001\002\000\004\063\133\001\002\000\004" +
    "\022\134\001\002\000\004\007\135\001\002\000\004\017" +
    "\136\001\002\000\004\022\uffea\001\002\000\004\006\140" +
    "\001\002\000\004\017\141\001\002\000\004\022\ufffb\001" +
    "\002\000\004\005\143\001\002\000\004\017\144\001\002" +
    "\000\006\016\011\022\ufffe\001\002\000\004\022\ufffd\001" +
    "\002\000\004\016\147\001\002\000\004\006\150\001\002" +
    "\000\004\017\151\001\002\000\004\016\154\001\002\000" +
    "\004\016\167\001\002\000\004\022\ufff7\001\002\000\004" +
    "\007\155\001\002\000\004\010\156\001\002\000\004\020" +
    "\157\001\002\000\004\024\160\001\002\000\004\017\161" +
    "\001\002\000\004\063\162\001\002\000\004\022\163\001" +
    "\002\000\004\007\164\001\002\000\004\017\165\001\002" +
    "\000\004\016\uffe6\001\002\000\004\016\201\001\002\000" +
    "\004\007\170\001\002\000\004\010\171\001\002\000\004" +
    "\020\172\001\002\000\004\042\173\001\002\000\004\017" +
    "\174\001\002\000\004\063\175\001\002\000\004\022\176" +
    "\001\002\000\004\007\177\001\002\000\004\017\200\001" +
    "\002\000\004\016\uffe5\001\002\000\004\007\203\001\002" +
    "\000\004\022\uffe7\001\002\000\004\010\204\001\002\000" +
    "\004\020\205\001\002\000\004\043\206\001\002\000\004" +
    "\017\207\001\002\000\012\045\212\052\216\053\220\057" +
    "\211\001\002\000\004\022\uffe0\001\002\000\004\022\u0188" +
    "\001\002\000\004\022\u015d\001\002\000\004\022\uffe3\001" +
    "\002\000\004\022\uffe1\001\002\000\004\022\uffe4\001\002" +
    "\000\004\022\u0132\001\002\000\004\022\uffe2\001\002\000" +
    "\004\022\221\001\002\000\004\007\222\001\002\000\004" +
    "\017\223\001\002\000\004\022\224\001\002\000\004\006" +
    "\225\001\002\000\004\017\226\001\002\000\004\016\227" +
    "\001\002\000\004\014\230\001\002\000\004\017\231\001" +
    "\002\000\004\016\235\001\002\000\004\016\u0121\001\002" +
    "\000\004\016\u010b\001\002\000\004\016\354\001\002\000" +
    "\004\015\340\001\002\000\004\016\246\001\002\000\004" +
    "\022\240\001\002\000\004\014\241\001\002\000\004\017" +
    "\242\001\002\000\004\022\uffdb\001\002\000\004\016\332" +
    "\001\002\000\004\016\316\001\002\000\004\016\276\001" +
    "\002\000\004\015\247\001\002\000\004\010\250\001\002" +
    "\000\004\020\251\001\002\000\010\047\252\054\254\056" +
    "\253\001\002\000\004\017\267\001\002\000\004\017\262" +
    "\001\002\000\004\017\255\001\002\000\004\063\256\001" +
    "\002\000\004\022\257\001\002\000\004\015\260\001\002" +
    "\000\004\017\261\001\002\000\006\016\uffb5\022\uffb5\001" +
    "\002\000\004\063\263\001\002\000\004\022\264\001\002" +
    "\000\004\015\265\001\002\000\004\017\266\001\002\000" +
    "\006\016\uffb3\022\uffb3\001\002\000\004\050\270\001\002" +
    "\000\004\022\271\001\002\000\004\015\272\001\002\000" +
    "\004\017\273\001\002\000\006\016\uffb2\022\uffb2\001\002" +
    "\000\006\016\310\022\uffd5\001\002\000\004\016\303\001" +
    "\002\000\004\015\277\001\002\000\004\010\300\001\002" +
    "\000\004\020\301\001\002\000\006\047\252\054\254\001" +
    "\002\000\004\022\uffbd\001\002\000\004\015\304\001\002" +
    "\000\004\010\305\001\002\000\004\020\306\001\002\000" +
    "\004\054\254\001\002\000\004\022\uffcf\001\002\000\004" +
    "\015\311\001\002\000\004\010\312\001\002\000\004\020" +
    "\313\001\002\000\004\047\252\001\002\000\004\016\324" +
    "\001\002\000\004\016\303\001\002\000\004\015\317\001" +
    "\002\000\004\010\320\001\002\000\004\020\321\001\002" +
    "\000\006\054\254\056\253\001\002\000\004\022\uffc3\001" +
    "\002\000\004\022\uffc4\001\002\000\004\015\325\001\002" +
    "\000\004\010\326\001\002\000\004\020\327\001\002\000" +
    "\004\056\253\001\002\000\004\016\324\001\002\000\006" +
    "\016\310\022\uffd6\001\002\000\004\015\333\001\002\000" +
    "\004\010\334\001\002\000\004\020\335\001\002\000\006" +
    "\047\252\056\253\001\002\000\004\022\uffd0\001\002\000" +
    "\004\022\uffbe\001\002\000\004\010\341\001\002\000\004" +
    "\020\342\001\002\000\012\047\252\054\254\055\343\056" +
    "\253\001\002\000\004\017\344\001\002\000\004\063\345" +
    "\001\002\000\004\022\346\001\002\000\004\015\347\001" +
    "\002\000\004\017\350\001\002\000\006\016\uffb4\022\uffb4" +
    "\001\002\000\004\016\u0102\001\002\000\004\016\366\001" +
    "\002\000\004\016\276\001\002\000\004\015\355\001\002" +
    "\000\004\010\356\001\002\000\004\020\357\001\002\000" +
    "\010\047\252\054\254\055\343\001\002\000\006\016\310" +
    "\022\uffd8\001\002\000\004\016\303\001\002\000\004\022" +
    "\uffc0\001\002\000\004\022\uffd2\001\002\000\004\016\373" +
    "\001\002\000\004\016\303\001\002\000\004\015\367\001" +
    "\002\000\004\010\370\001\002\000\004\020\371\001\002" +
    "\000\006\054\254\055\343\001\002\000\004\022\uffc6\001" +
    "\002\000\004\015\375\001\002\000\004\022\uffc5\001\002" +
    "\000\004\010\376\001\002\000\004\020\377\001\002\000" +
    "\004\055\343\001\002\000\004\016\373\001\002\000\006" +
    "\016\310\022\uffd7\001\002\000\004\015\u0103\001\002\000" +
    "\004\010\u0104\001\002\000\004\020\u0105\001\002\000\006" +
    "\047\252\055\343\001\002\000\004\022\uffd1\001\002\000" +
    "\004\022\uffbf\001\002\000\004\016\u0118\001\002\000\004" +
    "\016\366\001\002\000\004\016\316\001\002\000\004\015" +
    "\u010c\001\002\000\004\010\u010d\001\002\000\004\020\u010e" +
    "\001\002\000\010\054\254\055\343\056\253\001\002\000" +
    "\004\016\324\001\002\000\004\016\303\001\002\000\004" +
    "\022\uffc9\001\002\000\004\022\uffca\001\002\000\004\016" +
    "\373\001\002\000\004\016\303\001\002\000\004\022\uffcc" +
    "\001\002\000\004\022\uffcb\001\002\000\004\016\373\001" +
    "\002\000\004\015\u011b\001\002\000\004\016\324\001\002" +
    "\000\004\022\uffce\001\002\000\004\010\u011c\001\002\000" +
    "\004\020\u011d\001\002\000\006\055\343\056\253\001\002" +
    "\000\004\022\uffcd\001\002\000\004\016\u0118\001\002\000" +
    "\004\016\u0102\001\002\000\004\015\u0127\001\002\000\004" +
    "\016\332\001\002\000\004\016\324\001\002\000\006\016" +
    "\310\022\uffda\001\002\000\004\022\uffd4\001\002\000\004" +
    "\022\uffc2\001\002\000\004\010\u0128\001\002\000\004\020" +
    "\u0129\001\002\000\010\047\252\055\343\056\253\001\002" +
    "\000\004\016\373\001\002\000\006\016\310\022\uffd9\001" +
    "\002\000\004\022\uffd3\001\002\000\004\022\uffc1\001\002" +
    "\000\004\016\373\001\002\000\004\016\324\001\002\000" +
    "\004\022\uffc8\001\002\000\004\022\uffc7\001\002\000\004" +
    "\007\u0133\001\002\000\004\017\u0134\001\002\000\004\022" +
    "\u0135\001\002\000\004\006\u0136\001\002\000\004\017\u0137" +
    "\001\002\000\004\016\u0138\001\002\000\004\014\u0139\001" +
    "\002\000\004\017\u013a\001\002\000\004\016\u013c\001\002" +
    "\000\004\022\u015a\001\002\000\004\015\u013d\001\002\000" +
    "\004\010\u013e\001\002\000\004\020\u013f\001\002\000\004" +
    "\046\u0140\001\002\000\004\017\u0141\001\002\000\004\063" +
    "\u0142\001\002\000\004\022\u0143\001\002\000\004\015\u0144" +
    "\001\002\000\004\017\u0145\001\002\000\004\016\u0146\001" +
    "\002\000\004\015\u0147\001\002\000\004\010\u0148\001\002" +
    "\000\004\020\u0149\001\002\000\004\047\u014a\001\002\000" +
    "\004\017\u014b\001\002\000\004\050\u014c\001\002\000\004" +
    "\022\u014d\001\002\000\004\015\u014e\001\002\000\004\017" +
    "\u014f\001\002\000\004\016\u0150\001\002\000\004\015\u0151" +
    "\001\002\000\004\010\u0152\001\002\000\004\020\u0153\001" +
    "\002\000\004\051\u0154\001\002\000\004\017\u0155\001\002" +
    "\000\004\063\u0156\001\002\000\004\022\u0157\001\002\000" +
    "\004\015\u0158\001\002\000\004\017\u0159\001\002\000\004" +
    "\022\uffdc\001\002\000\004\014\u015b\001\002\000\004\017" +
    "\u015c\001\002\000\004\022\uffdd\001\002\000\004\007\u015e" +
    "\001\002\000\004\017\u015f\001\002\000\004\022\u0160\001" +
    "\002\000\004\006\u0161\001\002\000\004\017\u0162\001\002" +
    "\000\004\016\u0163\001\002\000\004\014\u0164\001\002\000" +
    "\004\017\u0165\001\002\000\004\016\u0166\001\002\000\004" +
    "\015\u016b\001\002\000\004\022\u0168\001\002\000\004\014" +
    "\u0169\001\002\000\004\017\u016a\001\002\000\004\022\uffdf" +
    "\001\002\000\004\010\u016c\001\002\000\004\020\u016d\001" +
    "\002\000\004\046\u016e\001\002\000\004\017\u016f\001\002" +
    "\000\004\063\u0170\001\002\000\004\022\u0171\001\002\000" +
    "\004\015\u0172\001\002\000\004\017\u0173\001\002\000\004" +
    "\016\u0174\001\002\000\004\015\u0175\001\002\000\004\010" +
    "\u0176\001\002\000\004\020\u0177\001\002\000\004\047\u0178" +
    "\001\002\000\004\017\u0179\001\002\000\004\050\u017a\001" +
    "\002\000\004\022\u017b\001\002\000\004\015\u017c\001\002" +
    "\000\004\017\u017d\001\002\000\004\016\u017e\001\002\000" +
    "\004\015\u017f\001\002\000\004\010\u0180\001\002\000\004" +
    "\020\u0181\001\002\000\004\051\u0182\001\002\000\004\017" +
    "\u0183\001\002\000\004\063\u0184\001\002\000\004\022\u0185" +
    "\001\002\000\004\015\u0186\001\002\000\004\017\u0187\001" +
    "\002\000\004\022\uffde\001\002\000\004\007\u0189\001\002" +
    "\000\004\017\u018a\001\002\000\004\022\u018b\001\002\000" +
    "\004\006\u018c\001\002\000\004\017\u018d\001\002\000\004" +
    "\016\u018e\001\002\000\004\014\u018f\001\002\000\004\017" +
    "\u0190\001\002\000\004\016\u010b\001\002\000\004\016\u0118" +
    "\001\002\000\004\016\366\001\002\000\004\022\u0199\001" +
    "\002\000\004\016\316\001\002\000\004\016\324\001\002" +
    "\000\004\016\303\001\002\000\004\022\uffb7\001\002\000" +
    "\004\022\uffb6\001\002\000\004\014\u019a\001\002\000\004" +
    "\017\u019b\001\002\000\004\022\uffbc\001\002\000\004\016" +
    "\373\001\002\000\004\016\303\001\002\000\004\022\uffb9" +
    "\001\002\000\004\022\uffb8\001\002\000\004\016\373\001" +
    "\002\000\004\016\324\001\002\000\004\022\uffbb\001\002" +
    "\000\004\022\uffba\001\002\000\004\016\u01a5\001\002\000" +
    "\004\006\u01a6\001\002\000\004\017\u01a7\001\002\000\004" +
    "\016\u01a9\001\002\000\004\022\u01e2\001\002\000\004\007" +
    "\u01aa\001\002\000\004\010\u01ab\001\002\000\004\020\u01ac" +
    "\001\002\000\004\024\u01ad\001\002\000\004\017\u01ae\001" +
    "\002\000\004\063\u01af\001\002\000\004\022\u01b0\001\002" +
    "\000\004\007\u01b1\001\002\000\004\017\u01b2\001\002\000" +
    "\004\016\u01b4\001\002\000\004\022\ufff4\001\002\000\004" +
    "\007\u01b5\001\002\000\004\010\u01b6\001\002\000\004\020" +
    "\u01b7\001\002\000\004\025\u01b8\001\002\000\004\017\u01b9" +
    "\001\002\000\004\063\u01ba\001\002\000\004\022\u01bb\001" +
    "\002\000\004\007\u01bc\001\002\000\004\017\u01bd\001\002" +
    "\000\006\016\u01c0\022\ufff0\001\002\000\004\022\ufff1\001" +
    "\002\000\004\022\ufff3\001\002\000\004\007\u01c2\001\002" +
    "\000\004\022\ufff2\001\002\000\004\010\u01c3\001\002\000" +
    "\004\020\u01c4\001\002\000\010\027\u01c5\030\u01c7\031\u01c6" +
    "\001\002\000\004\017\u01d7\001\002\000\004\017\u01d2\001" +
    "\002\000\004\017\u01c8\001\002\000\004\063\u01c9\001\002" +
    "\000\004\022\u01ca\001\002\000\004\007\u01cb\001\002\000" +
    "\004\017\u01cc\001\002\000\004\016\u01ce\001\002\000\004" +
    "\022\uffec\001\002\000\004\007\u01cf\001\002\000\004\010" +
    "\u01d0\001\002\000\004\020\u01d1\001\002\000\004\031\u01c6" +
    "\001\002\000\004\063\u01d3\001\002\000\004\022\u01d4\001" +
    "\002\000\004\007\u01d5\001\002\000\004\017\u01d6\001\002" +
    "\000\004\022\uffeb\001\002\000\004\063\u01d8\001\002\000" +
    "\004\022\u01d9\001\002\000\004\007\u01da\001\002\000\004" +
    "\017\u01db\001\002\000\006\016\u01dd\022\uffed\001\002\000" +
    "\004\022\uffee\001\002\000\004\007\u01df\001\002\000\004" +
    "\022\uffef\001\002\000\004\010\u01e0\001\002\000\004\020" +
    "\u01e1\001\002\000\006\030\u01c7\031\u01c6\001\002\000\004" +
    "\006\u01e3\001\002\000\004\017\u01e4\001\002\000\004\022" +
    "\ufffc\001\002\000\004\016\u01e6\001\002\000\004\006\u01e7" +
    "\001\002\000\004\017\u01e8\001\002\000\004\016\154\001" +
    "\002\000\004\016\167\001\002\000\004\022\ufff6\001\002" +
    "\000\004\016\201\001\002\000\004\022\uffe8\001\002\000" +
    "\004\020\u01ee\001\002\000\022\023\022\026\021\032\026" +
    "\033\030\037\027\040\024\041\023\044\031\001\002\000" +
    "\004\022\u01f0\001\002\000\004\005\u01f1\001\002\000\004" +
    "\017\u01f2\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f1\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\152\036\151\001\001\000\004\037\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\214\053" +
    "\212\055\216\057\213\065\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\060\236\061\231\062\232\063\235\064\233\001\001" +
    "\000\010\062\u011e\063\u0121\064\u011f\001\001\000\010\061" +
    "\u0107\063\u0109\064\u0108\001\001\000\010\061\350\062\351" +
    "\063\352\001\001\000\002\001\001\000\010\061\242\062" +
    "\243\064\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\062\327\064" +
    "\330\001\001\000\006\061\313\064\314\001\001\000\006" +
    "\061\273\062\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\306\001\001\000\004\061\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\322\001\001\000" +
    "\004\061\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\336\001\001\000" +
    "\004\062\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\062\377\063\u0100\001\001\000\006\061\363\063" +
    "\364\001\001\000\006\061\357\062\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\362\001\001\000\004\061\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\373\001" +
    "\001\000\004\061\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0106\001" +
    "\001\000\004\062\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\u0118\064\u0116\001\001" +
    "\000\006\061\u0112\063\u0113\001\001\000\006\061\u010e\064" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0111\001\001\000" +
    "\004\061\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u0115\001\001\000\004\061\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u011d\001\001" +
    "\000\002\001\001\000\004\064\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\u012e\064\u012d\001\001\000" +
    "\006\062\u0129\063\u012a\001\001\000\002\001\001\000\006" +
    "\062\u0122\064\u0123\001\001\000\004\064\u0125\001\001\000" +
    "\004\062\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u012c\001\001\000\004\062\u012b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0130\001\001\000" +
    "\004\064\u012f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\061\u0190\063\u0193\064\u0191\066\u0192" +
    "\001\001\000\006\063\u01a0\064\u019f\001\001\000\006\061" +
    "\u019b\063\u019c\001\001\000\002\001\001\000\006\061\u0194" +
    "\064\u0195\001\001\000\004\064\u0197\001\001\000\004\061" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u019e\001\001\000\004\061\u019d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\u01a2\001\001\000\004\064" +
    "\u01a1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\u01be\023\u01c0\024\u01bd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u01cc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u01dd" +
    "\024\u01db\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u01e9\036\u01e8\001\001\000\004\037\u01ea\001" +
    "\001\000\002\001\001\000\004\041\u01eb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u01ee\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AccionesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AccionesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AccionesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Connect this parser to a scanner!
   
    public AccionesParser(AccionesLexer lex) {
	    super(lex);
	  }
    private Symbol s;

    public ArrayList<ErrorSintactico> errores = new ArrayList<>();


    public void syntax_error(Symbol c) {
            this.s = c;
            String cadena = c.value.toString();
                        int linea = c.left;
                        int col = c.right;
                        System.out.print("Error aca, value: " + cadena);
                        System.out.print(" -Linea " + linea);
                        System.out.println(" Columna " + col);
                             errores.add(new ErrorSintactico(cadena, linea, col, "Error sintáctico"));
                        if (expected_token_ids().isEmpty()) {
                            System.out.println("ya no se esperaba ningun simbolo");
                        }
    }
    
    public Symbol getSim(){
        return this.s;
    }

    public List<Sitio> sitios  = new ArrayList<>();
    public List<Pagina> paginas = new ArrayList<>();
    public List<Componente> componentes = new ArrayList<>();
    public List<Componente> componentesModificacion = new ArrayList<>();
    public List<Accion> acciones = new ArrayList<>();
    Sitio site = new Sitio();
    Img img = new Img();


    /*
    public void unrecovered_syntax_error(Symbol c) {
        System.out.println("Error irrecuperable sobrecargado: "+c.value);
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AccionesParser$actions {
  private final AccionesParser parser;

  /** Constructor */
  CUP$AccionesParser$actions(AccionesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AccionesParser$do_action(
    int                        CUP$AccionesParser$act_num,
    java_cup.runtime.lr_parser CUP$AccionesParser$parser,
    java.util.Stack            CUP$AccionesParser$stack,
    int                        CUP$AccionesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AccionesParser$result;

      /* select the action based on the action number */
      switch (CUP$AccionesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // params_delete_component ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR TEXTO CERRAR PARAMETRO MAYOR MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_PAGINA MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              AccionDeletComponent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int paginaleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int paginaright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String pagina = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 
                                RESULT = new AccionDeletComponent(id, pagina);
                            
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_delete_component",22, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-19)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alineacion_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR 
            {
              String RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        RESULT = alineacion;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("alineacion_img",48, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ancho_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ANCHO MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              Integer RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String ancho = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    RESULT = Integer.parseInt(ancho);
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("ancho_img",50, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // altura_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALTURA MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              Integer RESULT =null;
		int alturaleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alturaright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String altura = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    RESULT = Integer.parseInt(altura);
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("altura_img",49, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // url_img ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ORIGEN MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              String RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                RESULT = url;
            
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("url_img",47, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributos_video ::= altura_img url_img ancho_img 
            {
              Video RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributos_video ::= altura_img ancho_img url_img 
            {
              Video RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributos_video ::= ancho_img url_img altura_img 
            {
              Video RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributos_video ::= ancho_img altura_img url_img 
            {
              Video RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributos_video ::= url_img ancho_img altura_img 
            {
              Video RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atributos_video ::= url_img altura_img ancho_img 
            {
              Video RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Video(h,  ancho, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_video",52, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // crear_video ::= COMPONENTE_VIDEO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_video CERRAR ATRIBUTOS MAYOR 
            {
              Video RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int videoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int videoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Video video = (Video)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Video v = video;
                    v.setClase(clase);
                    RESULT = v;
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_video",51, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // atributos_img ::= altura_img ancho_img alineacion_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributos_img ::= altura_img url_img alineacion_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributos_img ::= ancho_img url_img alineacion_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributos_img ::= ancho_img altura_img alineacion_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributos_img ::= url_img ancho_img alineacion_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributos_img ::= url_img altura_img alineacion_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributos_img ::= altura_img alineacion_img ancho_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributos_img ::= altura_img alineacion_img url_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributos_img ::= ancho_img alineacion_img url_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributos_img ::= ancho_img alineacion_img altura_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributos_img ::= url_img alineacion_img ancho_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributos_img ::= url_img alineacion_img altura_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributos_img ::= alineacion_img altura_img ancho_img url_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atributos_img ::= alineacion_img altura_img url_img ancho_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atributos_img ::= alineacion_img ancho_img url_img altura_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributos_img ::= alineacion_img ancho_img altura_img url_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributos_img ::= alineacion_img url_img ancho_img altura_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributos_img ::= alineacion_img url_img altura_img ancho_img 
            {
              Img RESULT =null;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributos_img ::= altura_img ancho_img url_img alineacion_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributos_img ::= altura_img url_img ancho_img alineacion_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atributos_img ::= ancho_img url_img altura_img alineacion_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributos_img ::= ancho_img altura_img url_img alineacion_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributos_img ::= url_img ancho_img altura_img alineacion_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributos_img ::= url_img altura_img ancho_img alineacion_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url, alineacion); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributos_img ::= altura_img ancho_img url_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributos_img ::= altura_img url_img ancho_img 
            {
              Img RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributos_img ::= ancho_img url_img altura_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributos_img ::= ancho_img altura_img url_img 
            {
              Img RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atributos_img ::= url_img ancho_img altura_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atributos_img ::= url_img altura_img ancho_img 
            {
              Img RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = new Img(h, a, url); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_img",46, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // crear_img ::= COMPONENTE_IMAGEN CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_img CERRAR ATRIBUTOS MAYOR 
            {
              Img RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int imgleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Img img = (Img)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Img image = img;
                    image.setClase(clase);
                    RESULT = image;

                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_img",45, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atributos_parrafo ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_TEXTO MAYOR TEXTO CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_COLOR MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Parrafo parrafo = new Parrafo();
                        parrafo.setColor(color);
                        parrafo.setTexto(txt);
                        parrafo.setAlineacion(alineacion);
                        RESULT = (Parrafo) parrafo;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_parrafo",44, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-29)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // crear_parrafo ::= COMP_PARRAFO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_parrafo CERRAR ATRIBUTOS MAYOR 
            {
              Parrafo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int parrafoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int parraforight = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Object parrafo = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Parrafo parraf = (Parrafo) parrafo;
                        parraf.setClase(clase);
                        RESULT = (Parrafo) parraf;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_parrafo",43, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atributos_titulo ::= MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_TEXTO MAYOR TEXTO CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_ALINEACION MAYOR VALOR_ALINEACION CERRAR ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL ATRIBUTO_COLOR MAYOR TEXTO CERRAR ATRIBUTO MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-23)).value;
		int alineacionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int alineacionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String alineacion = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        Titulo titulo = new Titulo();
                        titulo.setColor(color);
                        titulo.setTexto(txt);
                        titulo.setAlineacion(alineacion);
                        RESULT = (Titulo) titulo;
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("atributos_titulo",42, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-29)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // crear_titulo ::= COMP_TITULO CERRAR PARAMETRO MAYOR CERRAR PARAMETROS MAYOR MENOR ATRIBUTOS MAYOR atributos_titulo CERRAR ATRIBUTOS MAYOR 
            {
              Titulo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                    Titulo t =(Titulo) titulo;
                    t.setClase(clase);
                    RESULT = (Titulo) t;
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("crear_titulo",41, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-13)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_clase ::= crear_video 
            {
              Componente RESULT =null;
		int videoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int videoright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Video video = (Video)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Video) video; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",32, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_clase ::= crear_img 
            {
              Componente RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Img img = (Img)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Img) img; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",32, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_clase ::= crear_parrafo 
            {
              Componente RESULT =null;
		int parrafoleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int parraforight = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Parrafo parrafo = (Parrafo)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  RESULT = (Parrafo) parrafo; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",32, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_clase ::= crear_titulo 
            {
              Componente RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Titulo titulo = (Titulo)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 RESULT = (Titulo) titulo; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("op_clase",32, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // clase_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_CLASE MAYOR op_clase 
            {
              Componente RESULT =null;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		 
                    if(componente instanceof Parrafo parraf){
                        RESULT = (Parrafo) componente;
                    }else if(componente instanceof Titulo titulo){
                        RESULT = (Titulo) componente; 
                    }else if(componente instanceof Img img){
                        RESULT = (Img) componente;
                    }else if(componente instanceof Video video){
                        RESULT = (Video) componente;
                    }else if(componente instanceof Menu menu){
                        RESULT = (Menu) componente;
                    }
                   
                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("clase_comp",31, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // page_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_PAGINA MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = page; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("page_comp",29, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_comp ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = id; 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("id_comp",28, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params_component ::= id_comp page_comp clase_comp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  
                            if(componente instanceof Titulo titulo){
                                titulo = (Titulo) componente;
                                titulo.setId(id);
                                titulo.setPagina(page);
                                parser.componentes.add(titulo);
                            }else if(componente instanceof Parrafo parraf){
                                parraf = (Parrafo)componente;
                                parraf.setId(id);
                                parraf.setPagina(page);
                                parser.componentes.add(parraf);
                            }else if(componente instanceof Img img){
                                img = (Img)componente;
                                img.setId(id);
                                img.setPagina(page);
                                parser.componentes.add(img);
                            }else if(componente instanceof Video video){
                                video = (Video)componente;
                                video.setId(id);
                                video.setPagina(page);
                                parser.componentes.add(video);
                            }else if(componente instanceof Menu menu){
                                menu = (Menu)componente;
                                menu.setId(id);
                                menu.setPagina(page);
                                parser.componentes.add(menu);
                            }

                        
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_component",23, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // params_component_modificar ::= id_comp page_comp clase_comp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)).value;
		int pageleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int pageright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		String page = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		int componenteleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).left;
		int componenteright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()).right;
		Componente componente = (Componente)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.peek()).value;
		  
                                    if(componente instanceof Titulo titulo){
                                        titulo = (Titulo) componente;
                                        titulo.setId(id);
                                        titulo.setPagina(page);
                                        parser.componentesModificacion.add(titulo);
                                    }else if(componente instanceof Parrafo parraf){
                                        parraf = (Parrafo)componente;
                                        parraf.setId(id);
                                        parraf.setPagina(page);
                                        parser.componentesModificacion.add(parraf);
                                    }else if(componente instanceof Img img){
                                        img = (Img)componente;
                                        img.setId(id);
                                        img.setPagina(page);
                                        parser.componentesModificacion.add(img);
                                    }else if(componente instanceof Video video){
                                        video = (Video)componente;
                                        video.setId(id);
                                        video.setPagina(page);
                                        parser.componentesModificacion.add(video);
                                    }else if(componente instanceof Menu menu){
                                        menu = (Menu)componente;
                                        menu.setId(id);
                                        menu.setPagina(page);
                                        parser.componentesModificacion.add(menu);
                                    }
                                
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_component_modificar",27, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-2)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // params_borrar_pagina ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              AccionDeletePage RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 RESULT = new AccionDeletePage("",id); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_borrar_pagina",21, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params_borrar_sitio ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              AccionDeleteSitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                            RESULT = new AccionDeleteSitio("", id);
                        
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("params_borrar_sitio",20, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // userM ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_MODIFICACION MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userM",18, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fechaM ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_MODIFICACION MAYOR TEXTO CERRAR PARAMETRO MAYOR userM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaM",17, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fechaC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaC",16, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fechaC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR userM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaC",16, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fechaC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_FECHA_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR fechaM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("fechaC",16, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // userC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userC",19, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // userC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR userM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userC",19, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // userC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR fechaM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userC",19, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // userC ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_USUARIO_CREACION MAYOR TEXTO CERRAR PARAMETRO MAYOR fechaC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("userC",19, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_sitio ::= MENOR PARAMETRO NOMBRE IGUAL PARAMETRO_ID MAYOR TEXTO CERRAR PARAMETRO MAYOR userC 
            {
              Sitio RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-4)).value;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("parametros_sitio",4, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-10)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nombre_accion ::= ACCION_BORRAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_delete_component CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeletComponent accion = (AccionDeletComponent)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 
                        AccionDeletComponent delete = accion;
                        delete.setTipo(Accion.DELE_COMPONENT);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nombre_accion ::= ACCION_MODIFICAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_component_modificar 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nombre_accion ::= ACCION_AGREGAR_COMPONENTE MAYOR MENOR PARAMETROS MAYOR params_component 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-5)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nombre_accion ::= ACCION_MODIFICAR_PAGINA 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_accion ::= ACCION_BORRAR_PAGINA MAYOR MENOR PARAMETROS MAYOR params_borrar_pagina CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeletePage accion = (AccionDeletePage)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        AccionDeletePage delete = accion;
                        delete.setTipo(Accion.DELETE_PAGE);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre_accion ::= ACCION_NUEVA_PAGINA MAYOR MENOR PARAMETROS MAYOR parametros_pagina CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre_accion ::= ACCION_BORRAR_SITIO_WEB MAYOR MENOR PARAMETROS MAYOR params_borrar_sitio CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		AccionDeleteSitio accion = (AccionDeleteSitio)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		
                        AccionDeleteSitio delete = accion;
                        delete.setTipo(Accion.DELETE_SITE);
                        parser.acciones.add(delete);
                    
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nombre_accion ::= ACCION_NUEVO_SITIO MAYOR MENOR PARAMETROS MAYOR parametros_sitio CERRAR PARAMETROS MAYOR 
            {
              Object RESULT =null;
		int sitioleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).left;
		int sitioright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).right;
		Sitio sitio = (Sitio)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-3)).value;
		 parser.sitios.add(sitio); 
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("nombre_accion",36, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR list_acciones 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_acciones",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-8)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("list_acciones",2, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // acciones ::= MENOR ACCION NOMBRE IGUAL nombre_accion CERRAR ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("acciones",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-7)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // acciones ::= MENOR ACCIONES MAYOR list_acciones CERRAR ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("acciones",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          return CUP$AccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= acciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)).value;
		RESULT = start_val;
              CUP$AccionesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.elementAt(CUP$AccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$AccionesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AccionesParser$parser.done_parsing();
          return CUP$AccionesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

